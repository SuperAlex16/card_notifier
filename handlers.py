import re

from telebot import types

from func.add_functions import ask_for_amount, ask_for_monthly_recurrence, ask_for_card_name, \
    save_transactions_to_db, undo_save_transactions_to_db, ask_for_transaction_type, start_addition_process
from func.edit_functions import done_transactions, undone_transactions, delete_transactions, \
    undo_delete_transactions
from func.functions import show_today, show_nearest_days, show_this_month
from func.utils import create_transactions_dict, exit_current_action, is_recurrence, create_uuid
from keyboards import (create_calendar, main_menu_keyboard, nearest_menu_keyboard, start_keyboard,
                       delete_transactions_keyboard, undo_save_transactions_to_db_keyboard)
from log.logger import logging
from settings import db_transaction_types, main_menu_keyboard_text

user_states = {}
transaction_dict = {}


def register_handlers(bot):
    @bot.message_handler(func=lambda message: message.text == "/start")
    def handle_start_button(message):
        chat_id = message.chat.id
        logging.info(f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")
        logging.info(f"–ó–∞–ø—É—â–µ–Ω run_reminders –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        markup = start_keyboard()
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('CALENDAR_'))
    def handle_calendar(call):
        chat_id = call.message.chat.id
        data = call.data.split('_')
        action = data[1]
        print(action)
        if action == "MONTH":
            year, month = int(data[2]), int(data[3])
            calendar = create_calendar(year, month)
            bot.edit_message_reply_markup(
                call.message.chat.id, call.message.message_id, reply_markup=calendar
            )

        elif action == "DAY":
            year, month, day = int(data[2]), int(data[3]), int(data[4])
            transaction_date = {
                "year": year,
                "month": month,
                "day": day
            }
            key = "date"
            create_transactions_dict(chat_id, key, transaction_date, transaction_dict)
            bot.send_message(
                chat_id, f"–î–∞—Ç–∞: {transaction_date['day']}/{transaction_date['month']}"
                         f"/{transaction_date['year']}"
            )
            ask_for_card_name(bot, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data == "IGNORE")
    def ignore(call):
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("recurrence"))
    def handle_recurrence_selection(call):
        chat_id = call.message.chat.id
        recurrence_id = create_uuid()
        key = "recurrence_id"
        create_transactions_dict(chat_id, key, recurrence_id, transaction_dict)

        date = str(transaction_dict[chat_id]['date']['day']) + '/' + str(
            transaction_dict[chat_id]['date']['month']
        ) + '/' + str(transaction_dict[chat_id]['date']['year'])

        transaction_type = transaction_dict[chat_id]['type']
        amount = transaction_dict[chat_id]['amount']
        card = transaction_dict[chat_id]['card']
        save_transactions_to_db(chat_id, transaction_dict, payment_uuid=recurrence_id)
        markup = undo_save_transactions_to_db_keyboard(recurrence_id)
        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\nüìÖ {date}\nüîÑ {transaction_type}\nüí∞ {amount}\nüí≥ {card}\n",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("no_recurrence"))
    def handle_recurrence_selection(call):
        chat_id = call.message.chat.id
        payment_uuid = create_uuid()
        recurrence_id = None
        key = "recurrence_id"
        create_transactions_dict(chat_id, key, recurrence_id, transaction_dict)

        date = str(transaction_dict[chat_id]['date']['day']) + '/' + str(
            transaction_dict[chat_id]['date']['month']
        ) + '/' + str(transaction_dict[chat_id]['date']['year'])

        transaction_type = transaction_dict[chat_id]['type']
        amount = transaction_dict[chat_id]['amount']
        card = transaction_dict[chat_id]['card']

        save_transactions_to_db(chat_id, transaction_dict, payment_uuid)
        markup = undo_save_transactions_to_db_keyboard(payment_uuid)
        bot.send_message(
            chat_id,
            f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è\nüìÖ {date}\nüîÑ {transaction_type}\nüí∞ {amount}\nüí≥ {card}\n",
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("undo_add_transactions_"))
    def handle_undo_add_transactions(call):
        chat_id = call.message.chat.id
        action_id = call.data.split('undo_add_transactions_')[1]

        undo_save_transactions_to_db(chat_id, action_id)

        bot.send_message(chat_id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith("select_card_"))
    def handle_card_selection(call):
        chat_id = call.message.chat.id
        card_name = call.data.split("select_card_")[1]
        bot.send_message(
            chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É: {card_name}"
        )

        key = "card"
        create_transactions_dict(chat_id, key, card_name, transaction_dict)
        ask_for_transaction_type(bot, chat_id)

    @bot.callback_query_handler(func=lambda call: call.data.startswith("add_new_card_"))
    def handle_new_card_creation(call):
        chat_id = call.message.chat.id

        bot.send_message(
            chat_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã:"
        )
        user_states[chat_id] = {
            "state": "waiting_for_card_name",
        }

    @bot.callback_query_handler(func=lambda call: call.data.startswith("deposit_"))
    def handle_deposit(call):
        chat_id = call.message.chat.id
        transaction_type = db_transaction_types[1]

        key = "type"
        create_transactions_dict(chat_id, key, transaction_type, transaction_dict)

        bot.send_message(
            chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {transaction_type}"
        )
        ask_for_amount(bot, chat_id)
        user_states[chat_id] = {
            "state": "waiting_for_amount",
        }

    @bot.callback_query_handler(func=lambda call: call.data.startswith("withdraw_"))
    def handle_deposit(call):
        chat_id = call.message.chat.id
        transaction_type = db_transaction_types[2]

        key = "type"
        create_transactions_dict(chat_id, key, transaction_type, transaction_dict)

        bot.send_message(
            chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {transaction_type}"
        )
        ask_for_amount(bot, chat_id)
        user_states[chat_id] = {
            "state": "waiting_for_amount",
        }

    @bot.message_handler(
        func=lambda message: user_states.get(message.chat.id, {}).get("state") == "waiting_for_card_name"
    )
    def handle_card_name_input(message):
        chat_id = message.chat.id
        card_name = message.text.strip()
        message = message.text

        if exit_current_action(bot, chat_id, message, user_states):
            return

        def is_valid_card_name(card_name):
            pattern = r'^[a-zA-Z–∞-—è–ê-–Ø0-9 _-]+$'
            return bool(re.match(pattern, card_name))

        if not is_valid_card_name(card_name):
            bot.send_message(
                chat_id,
                "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –∫–∞—Ä—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è."
            )
            return

        user_states.pop(chat_id, None)

        bot.send_message(
            chat_id, f"–ö–∞—Ä—Ç–∞ \"{card_name}\" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞"
        )
        key = "card"
        create_transactions_dict(chat_id, key, card_name, transaction_dict)
        ask_for_transaction_type(bot, chat_id)

    @bot.message_handler(
        func=lambda message: user_states.get(message.chat.id, {}).get("state") == "waiting_for_amount"
    )
    def handle_card_amount_input(message):
        chat_id = message.chat.id
        amount = message.text.strip()
        amount = re.sub(r"[^\d.]", ".", amount)
        message = message.text

        if exit_current_action(bot, chat_id, message, user_states):
            return

        if "." in amount:
            integer_part, decimal_part = amount.split(".", 1)
            decimal_part = decimal_part[:2]
            amount = f"{integer_part}.{decimal_part}"
        else:
            amount = amount

        if not re.fullmatch(r"^\d{1,6}(\.\d{1,2})?$", amount):
            bot.send_message(
                chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É: –¥–æ 6 —Ü–∏—Ñ—Ä –ø–µ—Ä–µ–¥ –∑–∞–ø—è—Ç–æ–π"
            )
            return

        amount = float(amount)
        amount = f"{amount:.2f}"

        user_states.pop(chat_id, None)
        key = "amount"
        create_transactions_dict(chat_id, key, amount, transaction_dict)

        bot.send_message(chat_id, f"–°—É–º–º–∞: {amount}")

        ask_for_monthly_recurrence(bot, chat_id)

    @bot.message_handler(func=lambda message: True)
    def handle_menu(message):
        chat_id = message.chat.id

        if message.text == main_menu_keyboard_text[1]:
            show_today(message, bot, chat_id)
        elif message.text == main_menu_keyboard_text[2]:
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=nearest_menu_keyboard())
        elif message.text == main_menu_keyboard_text[3]:
            start_addition_process(bot, chat_id)
        # elif message.text == main_menu_keyboard_text[4]:
        #     edit_payments(message, bot)
        elif message.text == '3Ô∏è‚É£ –¥–Ω—è':
            show_nearest_days(message, 3, bot)
        elif message.text == '7Ô∏è‚É£ –¥–Ω–µ–π':
            show_nearest_days(message, 7, bot)
        elif message.text == '3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π':
            show_nearest_days(message, 30, bot)
        elif message.text == 'üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü':
            show_this_month(message, bot, chat_id)
        elif message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu_keyboard())
        else:
            bot.send_message(
                message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:', reply_markup=main_menu_keyboard()
            )

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        logging.info(f'Received callback: {call.data} from user {call.from_user.id}')
        chat_id = call.message.chat.id
        message_id = call.message.id
        original_text = call.message.text
        if call.data.startswith('done_'):
            payment_uuid = call.data.replace('done_', '')
            done_transactions(chat_id, payment_uuid)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'undo_done_{payment_uuid}')
            markup.add(undo_button)

            bot.edit_message_text(
                f"{original_text} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
                chat_id,
                message_id,
                reply_markup=markup
            )

        elif call.data.startswith('undo_done_'):
            payment_uuid = call.data.replace('undo_done_', '')
            undone_transactions(chat_id, payment_uuid)

            bot.edit_message_text(
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. {original_text} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", chat_id, message_id
            )

        elif call.data.startswith("delete_"):
            payment_uuid = call.data.replace("delete_", "")
            recurrence_id = is_recurrence(chat_id, payment_uuid)
            markup, message = delete_transactions_keyboard(payment_uuid, recurrence_id)

            bot.send_message(call.message.chat.id, f"{message}", reply_markup=markup)

        elif call.data.startswith("confirm_delete_"):
            payment_uuid = call.data.replace("confirm_delete_", "")

            delete_transactions(call.message.chat.id, payment_id=payment_uuid, recurrence_id=None)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"undo_delete_{payment_uuid}"
            )
            markup.add(undo_button)

            bot.send_message(
                call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:", reply_markup=markup
            )

        elif call.data.startswith("series_delete_"):
            recurrence_id = call.data.replace("series_delete_", "")

            delete_transactions(chat_id, payment_id=None, recurrence_id=recurrence_id)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"undo_series_delete_{recurrence_id}"
            )
            markup.add(undo_button)

            bot.send_message(
                call.message.chat.id,
                "–°–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:",
                reply_markup=markup
            )

        elif call.data.startswith("undo_delete_"):
            payment_uuid = call.data.replace("undo_delete_", "")

            undo_delete_transactions(chat_id, payment_id=payment_uuid, recurrence_id=None)

            bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        elif call.data.startswith("undo_series_delete_"):
            recurrence_id = call.data.replace("undo_series_delete_", "")

            undo_delete_transactions(chat_id, payment_id=None, recurrence_id=recurrence_id)

            bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
