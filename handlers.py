import re

from db_functions import init_db
from remind_func import *
from functions import *
from keyboards import main_menu_keyboard, nearest_menu_keyboard, start_keyboard, delete_transactions_keyboard
from logger import logging
from settings import reccurent_count_months


def register_handlers(bot):
    @bot.message_handler(func=lambda message: message.text == "/start")
    def handle_start_button(message):
        chat_id = message.chat.id
        logging.info(f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")
        init_db(chat_id)
        logging.info("–¢–∞–±–ª–∏—Ü–∞ –≤ –ë–î –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        run_reminders(bot, chat_id)
        logging.info(f"–ó–∞–ø—É—â–µ–Ω run_reminders –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        markup = start_keyboard()
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}", reply_markup=markup)

    @bot.message_handler(func=lambda message: True)
    def handle_menu(message):
        chat_id = message.chat.id
        if message.text == "üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?":
            show_today(message, bot, chat_id)
        elif message.text == "üîú –ë–ª–∏–∂–∞–π—à–∏–µ":
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=nearest_menu_keyboard())
        elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
            start_addition_process(message, bot, chat_id)
        elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
            edit_payments(message, bot)
        elif message.text == '3Ô∏è‚É£ –¥–Ω—è':
            show_nearest_days(message, 3, bot)
        elif message.text == '7Ô∏è‚É£ –¥–Ω–µ–π':
            show_nearest_days(message, 7, bot)
        elif message.text == '3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π':
            show_nearest_days(message, 30, bot)
        elif message.text == 'üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü':
            show_this_month(message, bot, chat_id)
        elif message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu_keyboard())
        else:
            bot.send_message(message.chat.id,
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
                reply_markup=main_menu_keyboard())

    @bot.callback_query_handler(func=lambda call: call.data.startswith("[recurrence"))
    def handle_recurrence_selection(call):
        match = re.match(r"\[(.*?)\]_\[(.*?)\]", call.data)
        action, payment_uuid = match.groups()
        print(f"action: {action}, UUID: {payment_uuid}")
        if action == 'recurrence_yes':
            create_recurring_payments(payment_uuid, reccurent_count_months, call.message.chat.id)
            bot.send_message(call.message.chat.id,
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {reccurent_count_months} –º–µ—Å—è—Ü–µ–≤.")
        elif action == 'recurrence_no':
            bot.send_message(call.message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.')
        else:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        logging.info(f'Received callback: {call.data} from user {call.from_user.id}')
        chat_id = call.message.chat.id

        if call.data.startswith('done_') or call.data.startswith('withdrawn_'):
            payment_uuid = call.data.split('_')[1]
            new_status = 1 if call.data.startswith('done_') else 0
            update_transaction_status(payment_uuid, new_status, chat_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?' –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton('‚ùå –ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?',
                callback_data=f'undo_done_{payment_uuid}_reminder')
            markup.add(undo_button)

            try:
                bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup)
                bot.answer_callback_query(call.id, '–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.')
            except Exception as e:
                logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                bot.answer_callback_query(call.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')

        elif call.data.startswith('undo_done_'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            data_parts = call.data.split('_')
            payment_uuid = data_parts[2]
            is_reminder = data_parts[-1] == 'reminder'

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–Ω–æ–ø–æ–∫
            transaction = get_transaction_by_uuid(payment_uuid, chat_id)
            if transaction:
                markup = types.InlineKeyboardMarkup()

                # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
                if is_reminder:
                    if transaction['transaction_type'].lower() == '–≤–Ω–µ—Å—Ç–∏':
                        original_button = types.InlineKeyboardButton('‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å',
                            callback_data=f'done_{payment_uuid}')
                    elif transaction['transaction_type'].lower() == '—Å–Ω—è—Ç—å':
                        original_button = types.InlineKeyboardButton('‚úÖ –£–∂–µ —Å–Ω—è–ª',
                            callback_data=f'withdrawn_{payment_uuid}')
                    else:
                        original_button = types.InlineKeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                            callback_data=f'done_{payment_uuid}')
                    markup.add(original_button)
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
                    done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment_uuid}')
                    edit_button = types.InlineKeyboardButton('‚úèÔ∏è', callback_data=f'edit_{payment_uuid}')
                    delete_button = types.InlineKeyboardButton('üóëÔ∏è', callback_data=f'delete_{payment_uuid}')
                    markup.add(done_button, edit_button, delete_button)

                try:
                    bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                        reply_markup=markup)
                    bot.answer_callback_query(call.id, '–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
                except Exception as e:
                    logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                    bot.answer_callback_query(call.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')

        elif call.data.startswith('undo_done_'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –¥–ª—è –æ—Ç–º–µ–Ω—ã
            payment_uuid = call.data.replace('undo_done_', '')
            update_transaction_status(payment_uuid, chat_id, 0)
            logging.info(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω–µ–Ω–∞.')

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏/—Å–Ω—è—Ç—å
            markup = types.InlineKeyboardMarkup()
            done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment_uuid}')
            withdrawn_button = types.InlineKeyboardButton('‚úÖ –£–∂–µ —Å–Ω—è–ª',
                callback_data=f'withdrawn_{payment_uuid}')
            markup.add(done_button, withdrawn_button)

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup)
                bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 0 (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
            update_transaction_status(payment_uuid, chat_id, 0)
            logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
            markup = types.InlineKeyboardMarkup()
            done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment_uuid}")
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment_uuid}")
            delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment_uuid}")
            markup.add(done_button, edit_button, delete_button)

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                bot.edit_message_reply_markup(chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup)
                bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

        elif call.data.startswith("delete_"):
            payment_uuid = call.data.replace("delete_", "")
            recurrence_id = is_recurrence(chat_id, payment_uuid)
            markup, message = delete_transactions_keyboard(payment_uuid, recurrence_id)

            bot.send_message(call.message.chat.id, f"{message}", reply_markup=markup)


        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
        elif call.data.startswith("confirm_delete_"):
            payment_uuid = call.data.replace("confirm_delete_", "")

            delete_transactions(call.message.chat.id, bot, payment_id=payment_uuid, reccurence_id=None)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ",
                callback_data=f"undo_delete_{payment_uuid}")
            markup.add(undo_button)

            bot.send_message(call.message.chat.id,
                "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:",
                reply_markup=markup)

        elif call.data.startswith("series_delete_"):
            reccurence_id = call.data.replace("series_delete_", "")

            delete_transactions(call.message.chat.id, bot, payment_id=None, reccurence_id=reccurence_id)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏",
                callback_data=f"undo_series_delete_{reccurence_id}")
            markup.add(undo_button)

            bot.send_message(call.message.chat.id,
                "–°–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:",
                reply_markup=markup)

        elif call.data.startswith("undo_delete_"):
            payment_uuid = call.data.replace("undo_delete_", "")

            undo_delete_transactions(call.message.chat.id, bot, payment_id=payment_uuid, reccurence_id=None)

            bot.send_message(call.message.chat.id,
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        elif call.data.startswith("undo_series_delete_"):
            reccurence_id = call.data.replace("undo_series_delete_", "")

            undo_delete_transactions(call.message.chat.id, bot, payment_id=None, reccurence_id=reccurence_id)

            bot.send_message(call.message.chat.id,
                    "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")