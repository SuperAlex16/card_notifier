import re

from telebot import types

from db_functions import init_db
from functions import (done_transactions, show_today, undo_transactions, is_recurrence, delete_transactions,
                       start_addition_process, show_nearest_days, show_this_month, create_recurring_payments,
                       undo_delete_transactions)
from keyboards import main_menu_keyboard, nearest_menu_keyboard, start_keyboard, delete_transactions_keyboard
from remind_func import *
from settings import recurrent_count_months


def register_handlers(bot):
    @bot.message_handler(func=lambda message: message.text == "/start")
    def handle_start_button(message):
        chat_id = message.chat.id
        logging.info(f"id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {chat_id}")
        init_db(chat_id)
        logging.info("–¢–∞–±–ª–∏—Ü–∞ –≤ –ë–î –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        run_reminders(bot, chat_id)
        logging.info(f"–ó–∞–ø—É—â–µ–Ω run_reminders –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        markup = start_keyboard()
        bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}", reply_markup=markup)

    @bot.message_handler(func=lambda message: True)
    def handle_menu(message):
        chat_id = message.chat.id
        if message.text == "üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?":
            show_today(message, bot, chat_id)
        elif message.text == "üîú –ë–ª–∏–∂–∞–π—à–∏–µ":
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=nearest_menu_keyboard())
        elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
            start_addition_process(message, bot, chat_id)
        # elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
        #     edit_payments(message, bot)
        elif message.text == '3Ô∏è‚É£ –¥–Ω—è':
            show_nearest_days(message, 3, bot)
        elif message.text == '7Ô∏è‚É£ –¥–Ω–µ–π':
            show_nearest_days(message, 7, bot)
        elif message.text == '3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π':
            show_nearest_days(message, 30, bot)
        elif message.text == 'üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü':
            show_this_month(message, bot, chat_id)
        elif message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu_keyboard())
        else:
            bot.send_message(
                message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:', reply_markup=main_menu_keyboard()
                )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("[recurrence"))
    def handle_recurrence_selection(call):
        match = re.match(r"\[(.*?)]_\[(.*?)]", call.data)
        action, payment_uuid = match.groups()
        print(f"action: {action}, UUID: {payment_uuid}")
        if action == 'recurrence_yes':
            create_recurring_payments(payment_uuid, recurrent_count_months, call.message.chat.id)
            bot.send_message(
                call.message.chat.id,
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {recurrent_count_months} –º–µ—Å—è—Ü–µ–≤."
                )
        elif action == 'recurrence_no':
            bot.send_message(call.message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.')
        else:
            bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        logging.info(f'Received callback: {call.data} from user {call.from_user.id}')
        chat_id = call.message.chat.id
        # done
        if call.data.startswith('done_'):
            payment_uuid = call.data.replace('done_', '')
            done_transactions(chat_id, bot, payment_uuid)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'undo_done_{payment_uuid}')
            markup.add(undo_button)

            bot.send_message(
                call.message.chat.id,
                "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=markup
                )

        elif call.data.startswith('undo_done_'):
            payment_uuid = call.data.replace('undo_done_', '')
            undo_transactions(chat_id, payment_uuid)

            bot.send_message(call.message.chat.id, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        elif call.data.startswith("delete_"):
            payment_uuid = call.data.replace("delete_", "")
            recurrence_id = is_recurrence(chat_id, payment_uuid)
            markup, message = delete_transactions_keyboard(payment_uuid, recurrence_id)

            bot.send_message(call.message.chat.id, f"{message}", reply_markup=markup)

        elif call.data.startswith("confirm_delete_"):
            payment_uuid = call.data.replace("confirm_delete_", "")

            delete_transactions(call.message.chat.id, payment_id=payment_uuid, recurrence_id=None)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"undo_delete_{payment_uuid}"
                )
            markup.add(undo_button)

            bot.send_message(
                call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:", reply_markup=markup
                )

        elif call.data.startswith("series_delete_"):
            recurrence_id = call.data.replace("series_delete_", "")

            delete_transactions(chat_id, payment_id=None, recurrence_id=recurrence_id)

            markup = types.InlineKeyboardMarkup()
            undo_button = types.InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"undo_series_delete_{recurrence_id}"
                )
            markup.add(undo_button)

            bot.send_message(
                call.message.chat.id,
                "–°–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:",
                reply_markup=markup
                )

        elif call.data.startswith("undo_delete_"):
            payment_uuid = call.data.replace("undo_delete_", "")

            undo_delete_transactions(chat_id, payment_id=payment_uuid, recurrence_id=None)

            bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

        elif call.data.startswith("undo_series_delete_"):
            recurrence_id = call.data.replace("undo_series_delete_", "")

            undo_delete_transactions(chat_id, payment_id=None, recurrence_id=recurrence_id)

            bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
