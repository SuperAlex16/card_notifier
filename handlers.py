import re

from db_functions import init_db
from remind_func import *
from functions import *
from keyboards import main_menu_keyboard, nearest_menu_keyboard, start_keyboard
from logger import logging
from settings import reccurent_count_months


def register_handlers(bot):
	@bot.message_handler(func=lambda message: message.text == "/start")
	def handle_start_button(message):
		# bot.send_message(message.chat.id, "–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'!")
		user_chat_id = message.chat.id
		logging.info(f'id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_chat_id}')
		init_db(user_chat_id)
		logging.info('–¢–∞–±–ª–∏—Ü–∞ –≤ –ë–î –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
		run_reminders(bot, user_chat_id)
		logging.info(f'–ó–∞–ø—É—â–µ–Ω run_reminders –¥–ª—è —á–∞—Ç–∞ {user_chat_id}')
		logging.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')
		markup = start_keyboard()
		bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}', reply_markup=markup)

	@bot.message_handler(func=lambda message: True)
	def handle_menu(message):
		chat_id = message.chat.id
		if message.text == "üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?":
			show_today(message, bot, chat_id)
		elif message.text == "üîú –ë–ª–∏–∂–∞–π—à–∏–µ":
			bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=nearest_menu_keyboard())
		elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
			start_addition_process(message, bot, chat_id)
		elif message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å':
			edit_payments(message, bot)
		elif message.text == '3Ô∏è‚É£ –¥–Ω—è':
			show_nearest_days(message, 3, bot)
		elif message.text == '7Ô∏è‚É£ –¥–Ω–µ–π':
			show_nearest_days(message, 7, bot)
		elif message.text == '3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π':
			show_nearest_days(message, 30, bot)
		elif message.text == 'üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü':
			show_this_month(message, bot, chat_id)
		elif message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
			bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu_keyboard())
		else:
			bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
							 reply_markup=main_menu_keyboard())

	# # @bot.callback_query_handler(
	# #     func=lambda call: call.data.startswith('delete_one_') or call.data.startswith('delete_series_'))
	# # def handle_delete_choice(call):
	# #     data = call.data
	# #     logging.info(f'–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_delete_choice –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}')
	# #     if data.startswith('delete_one_'):
	# #         payment_uuid = data.replace('delete_one_', '')
	# #         delete_one_transaction(payment_uuid)
	# #         bot.send_message(call.message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.')
	# #     elif data.startswith('delete_series_'):
	# #         recurrence_id = data.replace('delete_series_', '')
	# #         delete_series(recurrence_id)
	# #         bot.send_message(call.message.chat.id, '–í—Å—è —Å–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞.')
	#
	# # @bot.callback_query_handler(func=lambda call: call.data.startswith('restore_series_'))
	# # def handle_restore_series(call):
	# #     recurrence_id = call.data.replace('restore_series_', '')
	# #     restore_transaction(recurrence_id=recurrence_id)
	# #     bot.send_message(call.message.chat.id, '–í—Å—è —Å–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.')
	#
	# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ'
	# @bot.callback_query_handler(func=lambda call: call.data == 'cancel_addition')
	# def handle_cancel_addition(call):
	#     # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
	#     if call.message.chat.id in payment_data:
	#         if 'last_payment_uuid' in payment_data[call.message.chat.id]:
	#             del payment_data[call.message.chat.id]['last_payment_uuid']
	#             logging.info(f'–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}.')
	#
	#     # –û—á–∏—â–∞–µ–º —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
	#     bot.clear_step_handler(call.message)
	#
	#     # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ
	#     bot.send_message(call.message.chat.id, '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.')

	@bot.callback_query_handler(func=lambda call: call.data.startswith("[recurrence"))
	def handle_recurrence_selection(call):
		match = re.match(r"\[(.*?)\]_\[(.*?)\]", call.data)
		action, payment_uuid = match.groups()
		print(f"action: {action}, UUID: {payment_uuid}")
		if action == 'recurrence_yes':
			create_recurring_payments(payment_uuid, reccurent_count_months, call.message.chat.id)
			bot.send_message(call.message.chat.id,
							 f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ {reccurent_count_months} –º–µ—Å—è—Ü–µ–≤.")
		elif action == 'recurrence_no':
			bot.send_message(call.message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.')
		else:
			bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')

	@bot.callback_query_handler(func=lambda call: True)
	def handle_callback_query(call):
		logging.info(f'Received callback: {call.data} from user {call.from_user.id}')
		chat_id = call.message.chat.id
		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		if call.data.startswith('done_') or call.data.startswith('withdrawn_'):
			payment_uuid = call.data.split('_')[1]
			new_status = 1 if call.data.startswith('done_') else 0
			update_transaction_status(payment_uuid, new_status, chat_id)

			# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?' –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
			markup = types.InlineKeyboardMarkup()
			undo_button = types.InlineKeyboardButton('‚ùå –ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?',
													 callback_data=f'undo_done_{payment_uuid}_reminder')
			markup.add(undo_button)

			try:
				bot.edit_message_reply_markup(
					chat_id=call.message.chat.id,
					message_id=call.message.message_id,
					reply_markup=markup
				)
				bot.answer_callback_query(call.id, '–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.')
			except Exception as e:
				logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
				bot.answer_callback_query(call.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		elif call.data.startswith('undo_done_'):
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
			data_parts = call.data.split('_')
			payment_uuid = data_parts[2]
			is_reminder = data_parts[-1] == 'reminder'

			# –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–Ω–æ–ø–æ–∫
			transaction = get_transaction_by_uuid(payment_uuid, chat_id)
			if transaction:
				markup = types.InlineKeyboardMarkup()

				# –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
				if is_reminder:
					if transaction['transaction_type'].lower() == '–≤–Ω–µ—Å—Ç–∏':
						original_button = types.InlineKeyboardButton('‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å',
																	 callback_data=f'done_{payment_uuid}')
					elif transaction['transaction_type'].lower() == '—Å–Ω—è—Ç—å':
						original_button = types.InlineKeyboardButton('‚úÖ –£–∂–µ —Å–Ω—è–ª',
																	 callback_data=f'withdrawn_{payment_uuid}')
					else:
						original_button = types.InlineKeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
																	 callback_data=f'done_{payment_uuid}')
					markup.add(original_button)
				else:
					# –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
					done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment_uuid}')
					edit_button = types.InlineKeyboardButton('‚úèÔ∏è', callback_data=f'edit_{payment_uuid}')
					delete_button = types.InlineKeyboardButton('üóëÔ∏è', callback_data=f'delete_{payment_uuid}')
					markup.add(done_button, edit_button, delete_button)

				try:
					bot.edit_message_reply_markup(
						chat_id=call.message.chat.id,
						message_id=call.message.message_id,
						reply_markup=markup
					)
					bot.answer_callback_query(call.id, '–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.')
				except Exception as e:
					logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
					bot.answer_callback_query(call.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.')


		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ('undo_')
		elif call.data.startswith('undo_done_'):
			# –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –¥–ª—è –æ—Ç–º–µ–Ω—ã
			payment_uuid = call.data.replace('undo_done_', '')
			update_transaction_status(payment_uuid, chat_id, 0)
			logging.info(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω–µ–Ω–∞.')

			# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏/—Å–Ω—è—Ç—å
			markup = types.InlineKeyboardMarkup()
			done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment_uuid}')
			withdrawn_button = types.InlineKeyboardButton('‚úÖ –£–∂–µ —Å–Ω—è–ª', callback_data=f'withdrawn_{payment_uuid}')
			markup.add(done_button, withdrawn_button)

			try:
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
				bot.edit_message_reply_markup(
					chat_id=call.message.chat.id,
					message_id=call.message.message_id,
					reply_markup=markup
				)
				bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
				bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

			# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 0 (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
			update_transaction_status(payment_uuid, chat_id, 0)
			logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

			# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
			markup = types.InlineKeyboardMarkup()
			done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment_uuid}")
			edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment_uuid}")
			delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment_uuid}")
			markup.add(done_button, edit_button, delete_button)

			try:
				# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
				bot.edit_message_reply_markup(
					chat_id=call.message.chat.id,
					message_id=call.message.message_id,
					reply_markup=markup
				)
				bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
				bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

		# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		elif call.data.startswith("delete_"):
			payment_uuid = call.data.replace("delete_", "")

			markup = types.InlineKeyboardMarkup()
			confirm_button = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_delete_{payment_uuid}")
			cancel_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")
			markup.add(confirm_button, cancel_button)

			bot.send_message(call.message.chat.id, "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?", reply_markup=markup)

		elif call.data.startswith("delete_series_"):
			reccurence_id = call.data.replace("delete_series_", "")
			markup = types.InlineKeyboardMarkup()
			confirm_button = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_delete_{reccurence_id}")
			cancel_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='cancel_delete')
			markup.add(confirm_button, cancel_button)

			bot.send_message(call.message.chat.id, "–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π?", reply_markup=markup)

		# –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
		elif call.data.startswith("confirm_delete_"):
			payment_uuid = call.data.replace("confirm_delete_", "")

			# –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
			delete_transaction(payment_uuid, call.message.chat.id, bot)

			# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
			markup = types.InlineKeyboardMarkup()
			undo_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"undo_delete_{payment_uuid}")
			markup.add(undo_button)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
			bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:",
							 reply_markup=markup)

		# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		elif call.data.startswith("undo_delete_"):
			payment_uuid = call.data.replace("undo_delete_", "")
			conn = get_db_connection()
			cursor = conn.cursor()

			# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —á–∞—Å—Ç—å—é —Å–µ—Ä–∏–∏
			cursor.execute(f"""SELECT recurrence_id FROM '{chat_id}' WHERE uuid = ?""", (payment_uuid,))
			result = cursor.fetchone()
			conn.close()

			if result and result['recurrence_id']:
				recurrence_id = result['recurrence_id']
				restore_transaction(chat_id, recurrence_id=recurrence_id)
				bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—Å—è —Å–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
			else:
				restore_transaction(chat_id, uuid=payment_uuid)
				bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


		# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞–ª–µ–Ω–∏—è
		elif call.data == "cancel_delete":
			bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

		# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
		elif call.data.startswith("edit_"):
			payment_uuid = call.data.split("_")[-1]
			logging.info(f"–ü–æ–ª—É—á–µ–Ω UUID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {payment_uuid}")

			# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è UUID
			transaction = get_transaction_by_uuid(payment_uuid, chat_id)
			if not transaction:
				bot.answer_callback_query(call.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
				logging.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
				return

			# # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			# if call.from_user.id not in payment_data:
			#     payment_data[call.from_user.id] = {}
			# payment_data[call.from_user.id]['edit_uuid'] = payment_uuid

			# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			payment_date = transaction['date']
			card_name = transaction['card_name']
			transaction_type = transaction['transaction_type']
			amount = transaction['amount']

			bot.send_message(
				call.message.chat.id,
				f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n–î–∞—Ç–∞: {payment_date}, –ö–∞—Ä—Ç–∞: {card_name}, –¢–∏–ø: {transaction_type}, –°—É–º–º–∞: {amount}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞."
			)

			# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
			bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_edit_payment,
													  bot=bot, payment_uuid=payment_uuid)

			# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
			markup = types.InlineKeyboardMarkup()
			cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
													   callback_data=f"cancel_edit_{payment_uuid}")
			markup.add(cancel_button)

			# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
			bot.send_message(call.message.chat.id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
							 reply_markup=markup)

		# –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ì–û–¢–û–í–û
		elif call.data.startswith("cancel_edit_"):
			payment_uuid = call.data.replace("cancel_edit_", "")

			# –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
			# if call.from_user.id in payment_data and 'edit_uuid' in payment_data[call.from_user.id]:
			# del payment_data[call.from_user.id]['edit_uuid']
			bot.clear_step_handler(call.message)  # –û—á–∏—â–∞–µ–º —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
			bot.send_message(call.message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
			main_menu_keyboard(call.message, bot)
		else:
			bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.")

	# @bot.callback_query_handler(func=lambda call: call.data in ["recurrence_yes", "recurrence_no"])
	# def update_existing_payment(payment_uuid, date, card_name, transaction_type, amount):
	#     logging.info(f"–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å UUID: {payment_uuid}")
	#
	#     # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
	#     conn = get_db_connection()
	#     cursor = conn.cursor()
	#
	#     # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ transactions
	#     cursor.execute("""
	#         UPDATE transactions
	#         SET date = ?, card_name = ?, transaction_type = ?, amount = ?
	#         WHERE uuid = ?
	#     """, (date.isoformat(), card_name, transaction_type, amount, payment_uuid))
	#
	#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
	#     if cursor.rowcount == 0:
	#         logging.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
	#     else:
	#         logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
	#
	#     conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	#     conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	#
	@bot.callback_query_handler(
		func=lambda call: call.data.startswith("edit_one_") or call.data.startswith("edit_series_"))
	def handle_edit_choice(call):
		chat_id = call.message.chat.id
		logging.info(f"–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_edit_choice —Å callback_data: {call.data}")
		data = call.data

		if data.startswith("edit_one_"):
			payment_uuid = data.replace("edit_one_", "")
			logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å UUID: {payment_uuid} –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤")
			transaction = find_transaction(payment_uuid, chat_id)

			if transaction:
				logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {transaction}")
				bot.send_message(call.message.chat.id,
								 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
				bot.register_next_step_handler(call.message, edit_transaction_data, payment_uuid)
			else:
				logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
				bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

		elif data.startswith("edit_series_"):
			recurrence_id = data.replace("edit_series_", "")
			logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å recurrence_id: {recurrence_id}")
			bot.send_message(call.message.chat.id,
							 "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Å–µ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
			bot.register_next_step_handler(call.message, edit_series_data, bot=bot, recurrence_id=recurrence_id,
										   chat_id=chat_id)
