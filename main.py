import telebot
import asyncio
from telebot import types
from datetime import datetime, timedelta
import openpyxl
import sqlite3
import schedule
import time
import threading
import os
from dotenv import load_dotenv
import logging
import uuid
from calendar import monthrange
from dateutil.relativedelta import relativedelta


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É 'utf-8'
        logging.StreamHandler()
    ]
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not TOKEN:
    logging.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")

if not CHAT_ID:
    logging.error("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")
    raise ValueError("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")

try:
    CHAT_ID = int(CHAT_ID)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ CHAT_ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
except ValueError:
    logging.error("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    raise ValueError("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

bot = telebot.TeleBot(TOKEN)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('transactions.db')  # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'transactions.db'
    conn.row_factory = sqlite3.Row  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∏–º–µ–Ω–∞–º –∫–æ–ª–æ–Ω–æ–∫
    return conn

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            uuid TEXT PRIMARY KEY,
            date TEXT,
            card_name TEXT,
            transaction_type TEXT,
            amount REAL,
            execution_status INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def init_deleted_transactions_table():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS deleted_transactions (
            uuid TEXT PRIMARY KEY,
            date TEXT,
            card_name TEXT,
            transaction_type TEXT,
            amount REAL,
            execution_status INTEGER
        )
    ''')
    conn.commit()
    conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
init_db()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
payment_data = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def get_weekday_short(date):
    weekdays = {
        0: '–ø–Ω.',
        1: '–≤—Ç.',
        2: '—Å—Ä.',
        3: '—á—Ç.',
        4: '–ø—Ç.',
        5: '—Å–±.',
        6: '–≤—Å.'
    }
    return weekdays.get(date.weekday(), '')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?')
    btn2 = types.KeyboardButton('üîú –ë–ª–∏–∂–∞–π—à–∏–µ')
    btn3 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
    keyboard.add(btn1, btn2)
    keyboard.add(btn3)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–º–µ–Ω—é "–ë–ª–∏–∂–∞–π—à–∏–µ"
def nearest_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('3Ô∏è‚É£ –¥–Ω—è')
    btn2 = types.KeyboardButton('7Ô∏è‚É£ –¥–Ω–µ–π')
    btn3 = types.KeyboardButton('3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π')
    btn4 = types.KeyboardButton('üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü')
    back = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
    keyboard.add(btn1, btn2, btn3, btn4)
    keyboard.add(back)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = main_menu_keyboard()
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=markup)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –ø–æ–¥–º–µ–Ω—é "–ë–ª–∏–∂–∞–π—à–∏–µ"
@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    if message.text == "üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?":
        show_today(message)
    elif message.text == "üîú –ë–ª–∏–∂–∞–π—à–∏–µ":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=nearest_menu_keyboard())
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        start_addition_process(message)
    elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        edit_payments(message)
    elif message.text == "3Ô∏è‚É£ –¥–Ω—è":
        show_nearest_days(message, 3)
    elif message.text == "7Ô∏è‚É£ –¥–Ω–µ–π":
        show_nearest_days(message, 7)
    elif message.text == "3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π":
        show_nearest_days(message, 30)
    elif message.text == "üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü":
        show_this_month(message)
    elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–∞—Ç–µ
def get_transactions_by_date(date):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM transactions
        WHERE date = ? AND execution_status = 0
        ORDER BY date ASC, transaction_type = '—Å–Ω—è—Ç—å'  -- –°–Ω–∞—á–∞–ª–∞ "–≤–Ω–µ—Å—Ç–∏", –∑–∞—Ç–µ–º "—Å–Ω—è—Ç—å"
    ''', (date,))
    transactions = cursor.fetchall()
    conn.close()
    return transactions


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def update_transaction_status(uuid, status):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ transactions.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    uuid -- –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.
    status -- –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (1 –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, 0 –¥–ª—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ).
    """
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = sqlite3.connect('transactions.db')
    cursor = conn.cursor()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ UUID {uuid} –Ω–∞ —Å—Ç–∞—Ç—É—Å {status}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    cursor.execute('''
        UPDATE transactions
        SET execution_status = ?
        WHERE UUID = ?
    ''', (status, uuid))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    if cursor.rowcount == 0:
        logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
    else:
        logging.info(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å UUID {uuid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status}.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    conn.commit()
    conn.close()
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ commit: UUID {uuid}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def add_transaction(uuid, date, card_name, transaction_type, amount, execution_status=0):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO transactions (uuid, date, card_name, transaction_type, amount, execution_status)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (uuid, date, card_name, transaction_type, amount, execution_status))
    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def delete_transaction(uuid, chat_id):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π
    cursor.execute("SELECT recurrence_id, is_recursive FROM transactions WHERE uuid = ?", (uuid,))
    transaction = cursor.fetchone()
    conn.close()

    if transaction and transaction['is_recursive'] == 1:
        recurrence_id = transaction['recurrence_id']
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ –≤—Å–µ–π —Å–µ—Ä–∏–∏
        markup = types.InlineKeyboardMarkup()
        delete_one_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç—É", callback_data=f"delete_one_{uuid}")
        delete_series_button = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å—é —Å–µ—Ä–∏—é", callback_data=f"delete_series_{recurrence_id}")
        markup.add(delete_one_button, delete_series_button)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ —Ñ—É–Ω–∫—Ü–∏—é
        bot.send_message(chat_id, "–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å–µ—Ä–∏–∏. –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—ë –∏–ª–∏ –≤—Å—é —Å–µ—Ä–∏—é?", reply_markup=markup)
    else:
        delete_one_transaction(uuid)  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_one_") or call.data.startswith("delete_series_"))
def handle_delete_choice(call):
    data = call.data
    logging.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_delete_choice –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
    if data.startswith("delete_one_"):
        payment_uuid = data.replace("delete_one_", "")
        delete_one_transaction(payment_uuid)
        bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    elif data.startswith("delete_series_"):
        recurrence_id = data.replace("delete_series_", "")
        delete_series(recurrence_id)
        bot.send_message(call.message.chat.id, "–í—Å—è —Å–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: call.data.startswith("restore_series_"))
def handle_restore_series(call):
    recurrence_id = call.data.replace("restore_series_", "")
    restore_transaction(recurrence_id=recurrence_id)
    bot.send_message(call.message.chat.id, "–í—Å—è —Å–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


def delete_one_transaction(uuid):
    logging.info(f"–§—É–Ω–∫—Ü–∏—è delete_one_transaction –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è UUID: {uuid}")
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO deleted_transactions (uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive)
        SELECT uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive
        FROM transactions
        WHERE uuid = ?
    ''', (uuid,))
    
    cursor.execute('DELETE FROM transactions WHERE uuid = ?', (uuid,))
    conn.commit()
    logging.info(f"–¢–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} —É–¥–∞–ª–µ–Ω–∞.")
    conn.close()

def delete_series(recurrence_id):
    logging.info(f"–§—É–Ω–∫—Ü–∏—è delete_series –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è recurrence_id: {recurrence_id}")
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
        INSERT INTO deleted_transactions (uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive)
        SELECT uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive
        FROM transactions
        WHERE recurrence_id = ?
    ''', (recurrence_id,))

    cursor.execute('DELETE FROM transactions WHERE recurrence_id = ?', (recurrence_id,))
    conn.commit()
    logging.info(f"–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å recurrence_id {recurrence_id} —É–¥–∞–ª–µ–Ω—ã.")
    conn.close()


def restore_transaction(uuid=None, recurrence_id=None):
    conn = get_db_connection()
    cursor = conn.cursor()

    if recurrence_id:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        cursor.execute('SELECT COUNT(*) FROM deleted_transactions WHERE recurrence_id = ?', (recurrence_id,))
        count = cursor.fetchone()[0]
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ recurrence_id {recurrence_id}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—é —Å–µ—Ä–∏—é –ø–æ recurrence_id
        cursor.execute('''
            INSERT INTO transactions (uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive)
            SELECT uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive
            FROM deleted_transactions
            WHERE recurrence_id = ?
        ''', (recurrence_id,))

        # –£–¥–∞–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ deleted_transactions
        cursor.execute('DELETE FROM deleted_transactions WHERE recurrence_id = ?', (recurrence_id,))
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å recurrence_id {recurrence_id}.")

    elif uuid:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ –µ—ë UUID
        cursor.execute('''
            INSERT INTO transactions (uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive)
            SELECT uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive
            FROM deleted_transactions
            WHERE uuid = ?
        ''', (uuid,))

        cursor.execute('DELETE FROM deleted_transactions WHERE uuid = ?', (uuid,))
        logging.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid}.")

    conn.commit()
    conn.close()


def get_transactions_in_date_range(start_date, end_date):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM transactions
        WHERE date BETWEEN ? AND ? AND execution_status = 0
        ORDER BY date ASC, transaction_type = '—Å–Ω—è—Ç—å'
    ''', (start_date, end_date))
    transactions = cursor.fetchall()
    conn.close()
    return transactions


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
def show_today(message):
    current_date = datetime.now().date().isoformat()  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ 'YYYY-MM-DD'
    payments_today = get_transactions_by_date(current_date)

    if payments_today:
        for payment in payments_today:
            weekday_short = get_weekday_short(datetime.strptime(payment['date'].split()[0], '%Y-%m-%d').date())
            payment_str = f"{payment['date']} ({weekday_short}), {payment['card_name']}, {payment['transaction_type']} {payment['amount']:,.2f} —Ä—É–±."
            markup = types.InlineKeyboardMarkup()

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment['uuid']}")
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment['uuid']}")
            delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment['uuid']}")
            markup.add(done_button, edit_button, delete_button)

            bot.send_message(message.chat.id, payment_str, reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
def show_nearest_days(message, days):
    current_date = datetime.now().date()
    date_limit = (current_date + timedelta(days=days)).isoformat()
    payments = get_transactions_in_date_range(current_date.isoformat(), date_limit)

    if payments:
        for payment in payments:
            weekday_short = get_weekday_short(datetime.strptime(payment['date'].split()[0], '%Y-%m-%d').date())
            payment_str = f"{payment['date']} ({weekday_short}), {payment['card_name']}, {payment['transaction_type']} {payment['amount']:,.2f} —Ä—É–±."
            markup = types.InlineKeyboardMarkup()

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment['uuid']}")
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment['uuid']}")
            delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment['uuid']}")
            markup.add(done_button, edit_button, delete_button)

            bot.send_message(message.chat.id, payment_str, reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π.")
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
def show_this_month(message):
    current_date = datetime.now().date()
    start_of_month = current_date.replace(day=1).isoformat()  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    end_of_month = (current_date.replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
    end_of_month = end_of_month.isoformat()  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM transactions
        WHERE date BETWEEN ? AND ? AND date >= ? AND execution_status = 0
        ORDER BY date ASC, transaction_type = '—Å–Ω—è—Ç—å'
    ''', (start_of_month, end_of_month, current_date.isoformat()))
    transactions = cursor.fetchall()
    conn.close()

    if transactions:
        for payment in transactions:
            weekday_short = get_weekday_short(datetime.strptime(payment['date'], '%Y-%m-%d').date())
            payment_str = f"{payment['date']} ({weekday_short}), {payment['card_name']}, {payment['transaction_type']} {payment['amount']:,.2f} —Ä—É–±."
            markup = types.InlineKeyboardMarkup()

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
            done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment['uuid']}")
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment['uuid']}")
            delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment['uuid']}")
            markup.add(done_button, edit_button, delete_button)

            bot.send_message(message.chat.id, payment_str, reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        logging.info(f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def start_addition_process(message):
    # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    ask_for_payment_details(message)
    bot.register_next_step_handler(message, process_payment_data)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def ask_for_payment_details(message):
    markup = types.InlineKeyboardMarkup()
    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="cancel_addition")
    markup.add(cancel_button)

    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥), –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å', —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"
@bot.callback_query_handler(func=lambda call: call.data == "cancel_addition")
def handle_cancel_addition(call):
    # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª—è–µ–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if call.message.chat.id in payment_data:
        if 'last_payment_uuid' in payment_data[call.message.chat.id]:
            del payment_data[call.message.chat.id]['last_payment_uuid']
            logging.info(f"–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.message.chat.id}.")
    
    # –û—á–∏—â–∞–µ–º —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    bot.clear_step_handler(call.message)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ
    bot.send_message(call.message.chat.id, "–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω.")


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def process_payment_data(message):
    try:
        inputs = message.text.strip().split()
        if len(inputs) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")

        date_str, card_name, transaction_type_input, amount_str = inputs
        date = datetime.strptime(date_str, "%d.%m.%Y").date().isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD'
        transaction_type = transaction_type_input.lower()
        amount = float(amount_str)

        if transaction_type not in ["–≤–Ω–µ—Å—Ç–∏", "—Å–Ω—è—Ç—å"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.")

        payment_uuid = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if message.chat.id in payment_data and 'edit_uuid' in payment_data[message.chat.id]:
            old_uuid = payment_data[message.chat.id]['edit_uuid']

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            delete_transaction(old_uuid, message.chat.id)
            logging.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {old_uuid} –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            payment_data[message.chat.id]['edit_uuid'] = payment_uuid  # –û–±–Ω–æ–≤–ª—è–µ–º UUID –Ω–∞ –Ω–æ–≤—ã–π

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_transaction(payment_uuid, date, card_name, transaction_type, amount)
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_uuid –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
        if message.chat.id not in payment_data:
            payment_data[message.chat.id] = {}
        payment_data[message.chat.id]['last_payment_uuid'] = payment_uuid

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
        ask_for_monthly_recurrence(message)

    except (ValueError, IndexError) as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def ask_for_monthly_recurrence(message):
    markup = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton("–î–∞", callback_data="recurrence_yes")
    no_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="recurrence_no")
    markup.add(yes_button, no_button)
    
    bot.send_message(message.chat.id, "–ü–æ–≤—Ç–æ—Ä—è—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@bot.callback_query_handler(func=lambda call: call.data in ["recurrence_yes", "recurrence_no"])
def handle_recurrence_selection(call):
    if call.data == "recurrence_yes":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if call.message.chat.id in payment_data and 'last_payment_uuid' in payment_data[call.message.chat.id]:
            payment_uuid = payment_data[call.message.chat.id]['last_payment_uuid']
            # –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 36 –º–µ—Å—è—Ü–µ–≤
            create_recurring_payments(payment_uuid, 36)
            bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 36 –º–µ—Å—è—Ü–µ–≤.")
        else:
            bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    elif call.data == "recurrence_no":
        bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ 36 –º–µ—Å—è—Ü–µ–≤
import uuid  # –î–æ–±–∞–≤–∏–º, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ

import uuid

def create_recurring_payments(payment_uuid, months):
    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π recurrence_id –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–≤—Ç–æ—Ä–æ–≤
    cursor.execute("SELECT date, card_name, transaction_type, amount FROM transactions WHERE uuid = ?", (payment_uuid,))
    original_payment = cursor.fetchone()
    recurrence_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–≤—Ç–æ—Ä–æ–≤

    if original_payment:
        initial_date = datetime.fromisoformat(original_payment['date']).date()
        card_name = original_payment['card_name']
        transaction_type = original_payment['transaction_type']
        amount = original_payment['amount']

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è is_recursive –∏ recurrence_id
        cursor.execute('''
            UPDATE transactions
            SET recurrence_id = ?, is_recursive = 1
            WHERE uuid = ?
        ''', (recurrence_id, payment_uuid))

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ç–µ–º –∂–µ recurrence_id –∏ is_recursive = 1
        for i in range(1, months + 1):
            next_date = initial_date + relativedelta(months=i)
            last_day_of_month = monthrange(next_date.year, next_date.month)[1]

            if initial_date.day > last_day_of_month:
                next_date = next_date.replace(day=last_day_of_month)

            new_payment_uuid = str(uuid.uuid4())
            cursor.execute('''
                INSERT INTO transactions (uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive)
                VALUES (?, ?, ?, ?, ?, 0, ?, 1)
            ''', (new_payment_uuid, next_date.isoformat(), card_name, transaction_type, amount, recurrence_id))

        conn.commit()
        logging.info(f"–°–æ–∑–¥–∞–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è UUID {payment_uuid} –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤ —Å recurrence_id {recurrence_id}.")
    else:
        logging.error(f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    conn.close()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
deleted_payments = {}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def update_payment_status(payment_uuid, status):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE transactions
        SET execution_status = ?
        WHERE uuid = ?
    ''', (status, payment_uuid))

    if cursor.rowcount > 0:
        conn.commit()
        logging.info(f"–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å UUID {payment_uuid} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status}.")
    else:
        logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
    
    conn.close()


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
def edit_payments(message):
    current_date = datetime.now().date()
    date_limit = current_date + timedelta(days=30)
    payments = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        payment_uuid = row[0]
        payment_date = row[1].date() if isinstance(row[1], datetime) else None
        card_name = row[2]
        transaction_type = row[3]
        amount = row[4]
        execution_status = row[5]

        if payment_date and current_date <= payment_date <= date_limit and execution_status == 0:
            weekday_short = get_weekday_short(payment_date)
            payment_str = f"{payment_date.strftime('%d.%m.%Y')} ({weekday_short}), {card_name}, {transaction_type}, {amount:,.2f} —Ä—É–±."
            payments.append({'uuid': payment_uuid, 'description': payment_str, 'type': transaction_type})

    if payments:
        bot.send_message(message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for payment in payments:
            logging.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å UUID: {payment['uuid']}")
            markup = types.InlineKeyboardMarkup()
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{payment['uuid']}")
            markup.add(edit_button)
            bot.send_message(message.chat.id, f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {payment['description']}", reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        logging.info(
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")


def get_transaction_by_uuid(uuid):
    logging.info(f"–ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å UUID: {uuid}")
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM transactions WHERE uuid = ?', (uuid,))
    transaction = cursor.fetchone()
    if transaction is None:
        logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    conn.close()
    logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {transaction}")
    return transaction


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω callback_data: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if call.data.startswith("done_") or call.data.startswith("withdrawn_"):
        payment_uuid = call.data.split("_")[1]
        new_status = 1 if call.data.startswith("done_") else 0
        update_transaction_status(payment_uuid, new_status)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?" –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        undo_button = types.InlineKeyboardButton("‚ùå –ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?", callback_data=f"undo_done_{payment_uuid}_reminder")
        markup.add(undo_button)

        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    elif call.data.startswith("undo_done_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        data_parts = call.data.split("_")
        payment_uuid = data_parts[2]
        is_reminder = data_parts[-1] == "reminder"

        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–Ω–æ–ø–æ–∫
        transaction = get_transaction_by_uuid(payment_uuid)
        if transaction:
            markup = types.InlineKeyboardMarkup()
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É
            if is_reminder:
                if transaction['transaction_type'].lower() == "–≤–Ω–µ—Å—Ç–∏":
                    original_button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment_uuid}")
                elif transaction['transaction_type'].lower() == "—Å–Ω—è—Ç—å":
                    original_button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment_uuid}")
                else:
                    original_button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment_uuid}")
                markup.add(original_button)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏
                done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment_uuid}")
                edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment_uuid}")
                delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment_uuid}")
                markup.add(done_button, edit_button, delete_button)

            try:
                bot.edit_message_reply_markup(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
                bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ("undo_")
    elif call.data.startswith("undo_done_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º UUID –¥–ª—è –æ—Ç–º–µ–Ω—ã
        payment_uuid = call.data.replace("undo_done_", "")
        update_transaction_status(payment_uuid, 0)
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –≤–Ω–µ—Å—Ç–∏/—Å–Ω—è—Ç—å
        markup = types.InlineKeyboardMarkup()
        done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment_uuid}")
        withdrawn_button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment_uuid}")
        markup.add(done_button, withdrawn_button)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")


        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ 0 (–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)
        update_transaction_status(payment_uuid, 0)
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω–µ–Ω–∞.")

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫: –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ
        markup = types.InlineKeyboardMarkup()
        done_button = types.InlineKeyboardButton("‚úÖ", callback_data=f"done_{payment_uuid}")
        edit_button = types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{payment_uuid}")
        delete_button = types.InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_{payment_uuid}")
        markup.add(done_button, edit_button, delete_button)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    elif data.startswith("delete_"):
        payment_uuid = data.replace("delete_", "")
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        confirm_button = types.InlineKeyboardButton("–î–∞", callback_data=f"confirm_delete_{payment_uuid}")
        cancel_button = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete")
        markup.add(confirm_button, cancel_button)

        bot.send_message(call.message.chat.id, "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?", reply_markup=markup)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
    elif data.startswith("confirm_delete_"):
        payment_uuid = data.replace("confirm_delete_", "")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        delete_transaction(payment_uuid, call.message.chat.id)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        undo_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"undo_delete_{payment_uuid}")
        markup.add(undo_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã
        bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ:", reply_markup=markup)

    # –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    elif data.startswith("undo_delete_"):
        payment_uuid = data.replace("undo_delete_", "")
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —á–∞—Å—Ç—å—é —Å–µ—Ä–∏–∏
        cursor.execute("SELECT recurrence_id FROM deleted_transactions WHERE uuid = ?", (payment_uuid,))
        result = cursor.fetchone()
        conn.close()

        if result and result['recurrence_id']:
            recurrence_id = result['recurrence_id']
            restore_transaction(recurrence_id=recurrence_id)
            bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—Å—è —Å–µ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        else:
            restore_transaction(uuid=payment_uuid)
            bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


    # –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    elif data == "cancel_delete":
        bot.send_message(call.message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    elif data.startswith("edit_"):
        payment_uuid = data.split("_", 1)[1]
        logging.info(f"–ü–æ–ª—É—á–µ–Ω UUID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {payment_uuid}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è UUID
        transaction = get_transaction_by_uuid(payment_uuid)
        if not transaction:
            bot.answer_callback_query(call.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            logging.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if call.from_user.id not in payment_data:
            payment_data[call.from_user.id] = {}
        payment_data[call.from_user.id]['edit_uuid'] = payment_uuid

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        payment_date = transaction['date']
        card_name = transaction['card_name']
        transaction_type = transaction['transaction_type']
        amount = transaction['amount']
        
        bot.send_message(
            call.message.chat.id,
            f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n–î–∞—Ç–∞: {payment_date}, –ö–∞—Ä—Ç–∞: {card_name}, –¢–∏–ø: {transaction_type}, –°—É–º–º–∞: {amount}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞."
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_edit_payment)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        markup = types.InlineKeyboardMarkup()
        cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"cancel_edit_{payment_uuid}")
        markup.add(cancel_button)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        bot.send_message(call.message.chat.id, "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)

    # –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    elif data.startswith("cancel_edit_"):
        payment_uuid = data.replace("cancel_edit_", "")
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if call.from_user.id in payment_data and 'edit_uuid' in payment_data[call.from_user.id]:
            del payment_data[call.from_user.id]['edit_uuid']
            bot.clear_step_handler(call.message)  # –û—á–∏—â–∞–µ–º —à–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
            bot.send_message(call.message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        else:
            bot.answer_callback_query(call.id, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.")


@bot.callback_query_handler(func=lambda call: call.data in ["recurrence_yes", "recurrence_no"])
def update_existing_payment(payment_uuid, date, card_name, transaction_type, amount):
    logging.info(f"–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å UUID: {payment_uuid}")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
    conn = get_db_connection()
    cursor = conn.cursor()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ transactions
    cursor.execute('''
        UPDATE transactions
        SET date = ?, card_name = ?, transaction_type = ?, amount = ?
        WHERE uuid = ?
    ''', (date.isoformat(), card_name, transaction_type, amount, payment_uuid))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞
    if cursor.rowcount == 0:
        logging.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    else:
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn.close()   # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ


def process_edit_payment(message):
    try:
        if message.chat.id not in payment_data or 'edit_uuid' not in payment_data[message.chat.id]:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        payment_uuid = payment_data[message.chat.id]['edit_uuid']
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT recurrence_id, is_recursive FROM transactions WHERE uuid = ?", (payment_uuid,))
        transaction = cursor.fetchone()
        conn.close()

        if transaction and transaction['is_recursive'] == 1:
            recurrence_id = transaction['recurrence_id']
            markup = types.InlineKeyboardMarkup()
            edit_one_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç—É", callback_data=f"edit_one_{payment_uuid}")
            edit_series_button = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å—é —Å–µ—Ä–∏—é", callback_data=f"edit_series_{recurrence_id}")
            markup.add(edit_one_button, edit_series_button)
            
            logging.info(f"–ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: edit_one_{payment_uuid} –∏ edit_series_{recurrence_id}")
            bot.send_message(message.chat.id, "–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å–µ—Ä–∏–∏. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—ë –∏–ª–∏ –≤—Å—é —Å–µ—Ä–∏—é?", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
            bot.register_next_step_handler(message, edit_transaction_data, payment_uuid)

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")


def find_transaction(uuid):
    original_uuid = uuid
    if uuid.startswith("edit_one_"):
        uuid = uuid.replace("edit_one_", "")
    elif uuid.startswith("edit_series_"):
        uuid = uuid.replace("edit_series_", "")
        
    logging.info(f"–ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å UUID (–∏—Å—Ö–æ–¥–Ω—ã–π: {original_uuid}, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {uuid})")
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM transactions WHERE uuid = ?", (uuid,))
    transaction = cursor.fetchone()
    conn.close()

    if transaction:
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {transaction}")
    else:
        logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    
    return transaction


@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_one_") or call.data.startswith("edit_series_"))
def handle_edit_choice(call):
    logging.info(f"–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ handle_edit_choice —Å callback_data: {call.data}")
    data = call.data

    if data.startswith("edit_one_"):
        payment_uuid = data.replace("edit_one_", "")
        logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å UUID: {payment_uuid} –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤")
        transaction = find_transaction(payment_uuid)

        if transaction:
            logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {transaction}")
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
            bot.register_next_step_handler(call.message, edit_transaction_data, payment_uuid)
        else:
            logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            bot.send_message(call.message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            
    elif data.startswith("edit_series_"):
        recurrence_id = data.replace("edit_series_", "")
        logging.info(f"–ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å recurrence_id: {recurrence_id}")
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Å–µ—Ä–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
        bot.register_next_step_handler(call.message, edit_series_data, recurrence_id)


def edit_transaction_data(message, payment_uuid):
    logging.info(f"–§—É–Ω–∫—Ü–∏—è edit_transaction_data –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è UUID: {payment_uuid}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        inputs = message.text.strip().split()
        if len(inputs) != 4:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
            return

        date_str, card_name, transaction_type_input, amount_str = inputs
        date = datetime.strptime(date_str, "%d.%m.%Y").date()
        transaction_type = transaction_type_input.lower()
        amount = float(amount_str)

        if transaction_type not in ["–≤–Ω–µ—Å—Ç–∏", "—Å–Ω—è—Ç—å"]:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.")
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE transactions
            SET date = ?, card_name = ?, transaction_type = ?, amount = ?
            WHERE uuid = ?
        ''', (date, card_name, transaction_type, amount, payment_uuid))
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")

def edit_series_data(message, recurrence_id):
    logging.info(f"–§—É–Ω–∫—Ü–∏—è edit_series_data –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è recurrence_id: {recurrence_id}")
    try:
        inputs = message.text.strip().split()
        if len(inputs) != 4:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.")
            return

        date_str, card_name, transaction_type_input, amount_str = inputs
        date = datetime.strptime(date_str, "%d.%m.%Y").date()
        transaction_type = transaction_type_input.lower()
        amount = float(amount_str)

        if transaction_type not in ["–≤–Ω–µ—Å—Ç–∏", "—Å–Ω—è—Ç—å"]:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.")
            return

        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE transactions
            SET date = ?, card_name = ?, transaction_type = ?, amount = ?
            WHERE recurrence_id = ? AND date >= ?
        ''', (date, card_name, transaction_type, amount, recurrence_id, datetime.now().date().isoformat()))
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id, "–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def update_transaction_status(uuid, status):
    conn = sqlite3.connect('transactions.db')
    cursor = conn.cursor()
    cursor.execute('''
        UPDATE transactions
        SET execution_status = ?
        WHERE UUID = ?
    ''', (status, uuid))
    
    # Check if any rows were updated
    if cursor.rowcount == 0:
        logging.warning(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    else:
        logging.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    
    conn.commit()  # Save changes
    conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–£–∂–µ –≤–Ω–µ—Å" –∏–ª–∏ "–£–∂–µ —Å–Ω—è–ª"
def send_reminder_with_buttons(payment_uuid, message_text, transaction_type):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    payment_uuid -- –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (UUID).
    message_text -- —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    transaction_type -- —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ("–≤–Ω–µ—Å—Ç–∏" –∏–ª–∏ "—Å–Ω—è—Ç—å").
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if transaction_type.lower() == "–≤–Ω–µ—Å—Ç–∏":
        button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment_uuid}")
    elif transaction_type.lower() == "—Å–Ω—è—Ç—å":
        button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment_uuid}")
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
        button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment_uuid}")
    
    markup.add(button)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{message_text}' —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è UUID {payment_uuid}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        bot.send_message(CHAT_ID, message_text, reply_markup=markup)
        logging.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders():
    logging.info('send_reminders –∑–∞–ø—É—â–µ–Ω')

    current_datetime = datetime.now()
    current_date = current_datetime.date().isoformat()  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É 'YYYY-MM-DD'
    current_time_str = current_datetime.time().strftime("%H:%M")
    reminder_today_times = ["10:00", "14:00", "17:00", "20:49"]
    reminder_tomorrow_time = "15:00"

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM transactions
        WHERE execution_status = 0
        ORDER BY date ASC, transaction_type = '—Å–Ω—è—Ç—å'
    ''')
    rows = cursor.fetchall()
    conn.close()

    for row in rows:
        payment_uuid = row['uuid']
        payment_date = row['date']  # –°—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        card_name = row['card_name']
        transaction_type = row['transaction_type']
        amount = row['amount']
        execution_status = row['execution_status']

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ transaction_type –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        if isinstance(transaction_type, str):
            transaction_type_lower = transaction_type.lower()
        else:
            transaction_type_lower = ""
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è UUID {payment_uuid}: {transaction_type}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        if payment_date == current_date and current_time_str in reminder_today_times:
            logging.info(f'—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time_str}, –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_today_times}')
            message_text = f"‚ÄºÔ∏è –ë—Ä–∞—Ç–∏—à–∫–∞, –Ω–µ —à—É—Ç–∏ —Ç–∞–∫! –°—Ä–æ—á–Ω–æ: {amount:,.2f} —Ä—É–±. {transaction_type_lower} –ø–æ –∫–∞—Ä—Ç–µ {card_name}"
            send_reminder_with_buttons(payment_uuid, message_text, transaction_type_lower)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        elif (payment_date == (datetime.fromisoformat(current_date) + timedelta(days=1)).isoformat() and
              current_time_str == reminder_tomorrow_time):
            message_text = f"‚è∞ –ù–µ –∑–∞–±—É–¥—å: –ó–∞–≤—Ç—Ä–∞ {transaction_type_lower} {amount:,.2f} —Ä—É–±. –ø–æ –∫–∞—Ä—Ç–µ {card_name}"
            send_reminder_with_buttons(payment_uuid, message_text, transaction_type_lower)


def run_scheduler():
    while True:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        schedule.run_pending()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        next_run = schedule.idle_seconds()

        if next_run is None:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –Ω–∞ 1 –º–∏–Ω—É—Ç—É
            time.sleep(60)
        else:
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            time.sleep(max(1, next_run))  # –°—Ç–∞–≤–∏–º –º–∏–Ω–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥—É –æ–∂–∏–¥–∞–Ω–∏—è


def safe_polling():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ bot.polling: {e}")
            logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
            time.sleep(5)


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
schedule.every(1).minutes.do(send_reminders)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
bot_thread = threading.Thread(target=safe_polling, daemon=True)
bot_thread.start()

# –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
while True:
    time.sleep(60)
