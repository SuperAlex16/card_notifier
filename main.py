# import telebot
# import asyncio
# from telebot import types
# from datetime import datetime, timedelta
# import openpyxl
# import sqlite3
# import schedule
# import time
# import threading
# import os
# from dotenv import load_dotenv
# import logging
# import uuid
# from calendar import monthrange
# from dateutil.relativedelta import relativedelta
#
#
# # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
# load_dotenv()
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
# logging.basicConfig(
#     level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
#     format='%(asctime)s - %(levelname)s - %(message)s',
#     handlers=[
#         logging.FileHandler('bot.log', encoding='utf-8'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É 'utf-8'
#         logging.StreamHandler()
#     ]
# )
#
# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
# chat_id = os.getenv('chat_id')
#
# if not TOKEN:
#     logging.error('–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.')
#     raise ValueError('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.')
#
# if not chat_id:
#     logging.error('chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.')
#     raise ValueError('chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.')
#
# try:
#     chat_id = int(chat_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ chat_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
# except ValueError:
#     logging.error('chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
#     raise ValueError('chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
#
# bot = telebot.TeleBot(TOKEN)
#
#
#
#
# # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
# payment_data = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# def main_menu_keyboard():
#     keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
#     btn1 = types.KeyboardButton('üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?')
#     btn2 = types.KeyboardButton('üîú –ë–ª–∏–∂–∞–π—à–∏–µ')
#     btn3 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
#     keyboard.add(btn1, btn2)
#     keyboard.add(btn3)
#     return keyboard
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–º–µ–Ω—é '–ë–ª–∏–∂–∞–π—à–∏–µ'
# def nearest_menu_keyboard():
#     keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
#     btn1 = types.KeyboardButton('3Ô∏è‚É£ –¥–Ω—è')
#     btn2 = types.KeyboardButton('7Ô∏è‚É£ –¥–Ω–µ–π')
#     btn3 = types.KeyboardButton('3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π')
#     btn4 = types.KeyboardButton('üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü')
#     back = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
#     keyboard.add(btn1, btn2, btn3, btn4)
#     keyboard.add(back)
#     return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –ø–æ–¥–º–µ–Ω—é '–ë–ª–∏–∂–∞–π—à–∏–µ'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –¥–∞—Ç–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
# def show_today(message):
#     current_date = datetime.now().date().isoformat()  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ 'YYYY-MM-DD'
#     payments_today = get_transactions_by_date(current_date)
#
#     if payments_today:
#         for payment in payments_today:
#             weekday_short = get_weekday_short(datetime.strptime(payment['date'].split()[0], '%Y-%m-%d').date())
#             payment_str = f'{payment['date']} ({weekday_short}), {payment['card_name']}, {payment['transaction_type']} {payment['amount']:,.2f} —Ä—É–±.'
#             markup = types.InlineKeyboardMarkup()
#
#             # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
#             done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment['uuid']}')
#             edit_button = types.InlineKeyboardButton('‚úèÔ∏è', callback_data=f'edit_{payment['uuid']}')
#             delete_button = types.InlineKeyboardButton('üóëÔ∏è', callback_data=f'delete_{payment['uuid']}')
#             markup.add(done_button, edit_button, delete_button)
#
#             bot.send_message(message.chat.id, payment_str, reply_markup=markup)
#         logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')
#     else:
#         bot.send_message(message.chat.id, '–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.')
#         logging.info(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
# def show_nearest_days(message, days):
#     current_date = datetime.now().date()
#     date_limit = (current_date + timedelta(days=days)).isoformat()
#     payments = get_transactions_in_date_range(current_date.isoformat(), date_limit)
#
#     if payments:
#         for payment in payments:
#             weekday_short = get_weekday_short(datetime.strptime(payment['date'].split()[0], '%Y-%m-%d').date())
#             payment_str = f'{payment['date']} ({weekday_short}), {payment['card_name']}, {payment['transaction_type']} {payment['amount']:,.2f} —Ä—É–±.'
#             markup = types.InlineKeyboardMarkup()
#
#             # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
#             done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment['uuid']}')
#             edit_button = types.InlineKeyboardButton('‚úèÔ∏è', callback_data=f'edit_{payment['uuid']}')
#             delete_button = types.InlineKeyboardButton('üóëÔ∏è', callback_data=f'delete_{payment['uuid']}')
#             markup.add(done_button, edit_button, delete_button)
#
#             bot.send_message(message.chat.id, payment_str, reply_markup=markup)
#         logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')
#     else:
#         bot.send_message(message.chat.id, f'–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π.')
#         logging.info(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
# def show_this_month(message):
#     current_date = datetime.now().date()
#     start_of_month = current_date.replace(day=1).isoformat()  # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
#     end_of_month = (current_date.replace(day=1) + timedelta(days=32)).replace(day=1) - timedelta(days=1)
#     end_of_month = end_of_month.isoformat()  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
#
#     conn = get_db_connection()
#     cursor = conn.cursor()
#     cursor.execute("""
#         SELECT * FROM transactions
#         WHERE date BETWEEN ? AND ? AND date >= ? AND execution_status = 0
#         ORDER BY date ASC, transaction_type = '—Å–Ω—è—Ç—å'
#     """, (start_of_month, end_of_month, current_date.isoformat()))
#     transactions = cursor.fetchall()
#     conn.close()
#
#     if transactions:
#         for payment in transactions:
#             weekday_short = get_weekday_short(datetime.strptime(payment['date'], '%Y-%m-%d').date())
#             payment_str = f'{payment['date']} ({weekday_short}), {payment['card_name']}, {payment['transaction_type']} {payment['amount']:,.2f} —Ä—É–±.'
#             markup = types.InlineKeyboardMarkup()
#
#             # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
#             done_button = types.InlineKeyboardButton('‚úÖ', callback_data=f'done_{payment['uuid']}')
#             edit_button = types.InlineKeyboardButton('‚úèÔ∏è', callback_data=f'edit_{payment['uuid']}')
#             delete_button = types.InlineKeyboardButton('üóëÔ∏è', callback_data=f'delete_{payment['uuid']}')
#             markup.add(done_button, edit_button, delete_button)
#
#             bot.send_message(message.chat.id, payment_str, reply_markup=markup)
#         logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')
#     else:
#         bot.send_message(message.chat.id, '–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.')
#         logging.info(f'–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
# def start_addition_process(message):
#     # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#     ask_for_payment_details(message)
#     bot.register_next_step_handler(message, process_payment_data)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
# def ask_for_payment_details(message):
#     markup = types.InlineKeyboardMarkup()
#     cancel_button = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', callback_data='cancel_addition')
#     markup.add(cancel_button)
#
#     bot.send_message(
#         message.chat.id,
#         '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥), –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å', —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:',
#         reply_markup=markup
#     )


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
# def process_payment_data(message):
#     try:
#         inputs = message.text.strip().split()
#         if len(inputs) != 4:
#             raise ValueError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.')
#
#         date_str, card_name, transaction_type_input, amount_str = inputs
#         date = datetime.strptime(date_str, '%d.%m.%Y').date().isoformat()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç 'YYYY-MM-DD'
#         transaction_type = transaction_type_input.lower()
#         amount = float(amount_str)
#
#         if transaction_type not in ['–≤–Ω–µ—Å—Ç–∏', '—Å–Ω—è—Ç—å']:
#             raise ValueError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.')
#
#         payment_uuid = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#
#         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         if message.chat.id in payment_data and 'edit_uuid' in payment_data[message.chat.id]:
#             old_uuid = payment_data[message.chat.id]['edit_uuid']
#
#             # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#             delete_transaction(old_uuid, message.chat.id)
#             logging.info(f'–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {old_uuid} –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
#
#             # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#             payment_data[message.chat.id]['edit_uuid'] = payment_uuid  # –û–±–Ω–æ–≤–ª—è–µ–º UUID –Ω–∞ –Ω–æ–≤—ã–π
#
#         # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#         add_transaction(payment_uuid, date, card_name, transaction_type, amount)
#         logging.info(f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.')
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_uuid –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
#         if message.chat.id not in payment_data:
#             payment_data[message.chat.id] = {}
#         payment_data[message.chat.id]['last_payment_uuid'] = payment_uuid
#
#         # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏
#         ask_for_monthly_recurrence(message)
#
#     except (ValueError, IndexError) as e:
#         bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.')
#         logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
# def ask_for_monthly_recurrence(message):
#     markup = types.InlineKeyboardMarkup()
#     yes_button = types.InlineKeyboardButton('–î–∞', callback_data='recurrence_yes')
#     no_button = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='recurrence_no')
#     markup.add(yes_button, no_button)
#
#     bot.send_message(message.chat.id, '–ü–æ–≤—Ç–æ—Ä—è—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω–æ?', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ 36 –º–µ—Å—è—Ü–µ–≤
import uuid  # –î–æ–±–∞–≤–∏–º, –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ

import uuid

# def create_recurring_payments(payment_uuid, months):
#     conn = get_db_connection()
#     cursor = conn.cursor()
#
#     # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π recurrence_id –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–≤—Ç–æ—Ä–æ–≤
#     cursor.execute('SELECT date, card_name, transaction_type, amount FROM transactions WHERE uuid = ?', (payment_uuid,))
#     original_payment = cursor.fetchone()
#     recurrence_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≥—Ä—É–ø–ø—ã –ø–æ–≤—Ç–æ—Ä–æ–≤
#
#     if original_payment:
#         initial_date = datetime.fromisoformat(original_payment['date']).date()
#         card_name = original_payment['card_name']
#         transaction_type = original_payment['transaction_type']
#         amount = original_payment['amount']
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è is_recursive –∏ recurrence_id
#         cursor.execute("""
#             UPDATE transactions
#             SET recurrence_id = ?, is_recursive = 1
#             WHERE uuid = ?
#         """, (recurrence_id, payment_uuid))
#
#         # –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ç–µ–º –∂–µ recurrence_id –∏ is_recursive = 1
#         for i in range(1, months + 1):
#             next_date = initial_date + relativedelta(months=i)
#             last_day_of_month = monthrange(next_date.year, next_date.month)[1]
#
#             if initial_date.day > last_day_of_month:
#                 next_date = next_date.replace(day=last_day_of_month)
#
#             new_payment_uuid = str(uuid.uuid4())
#             cursor.execute("""
#                 INSERT INTO transactions (uuid, date, card_name, transaction_type, amount, execution_status, recurrence_id, is_recursive)
#                 VALUES (?, ?, ?, ?, ?, 0, ?, 1)
#             """, (new_payment_uuid, next_date.isoformat(), card_name, transaction_type, amount, recurrence_id))
#
#         conn.commit()
#         logging.info(f'–°–æ–∑–¥–∞–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è UUID {payment_uuid} –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤ —Å recurrence_id {recurrence_id}.')
#     else:
#         logging.error(f'–ò—Å—Ö–æ–¥–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
#
#     conn.close()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
deleted_payments = {}


# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ UUID
def remove_payment_by_uuid(payment_uuid):
    rows = list(sheet.iter_rows(min_row=2, values_only=False))
    for row in rows:
        if row[0].value == payment_uuid:
            sheet.delete_rows(row[0].row, 1)
            logging.info(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} —É–¥–∞–ª–µ–Ω.")
            return
    logging.warning(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
def edit_payments(message):
    current_date = datetime.now().date()
    date_limit = current_date + timedelta(days=30)
    payments = []

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
# def edit_payments(message):
#     current_date = datetime.now().date()
#     date_limit = current_date + timedelta(days=30)
#     payments = []
#
#     for row in sheet.iter_rows(min_row=2, values_only=True):
#         payment_uuid = row[0]
#         payment_date = row[1].date() if isinstance(row[1], datetime) else None
#         card_name = row[2]
#         transaction_type = row[3]
#         amount = row[4]
#         execution_status = row[5]
#
#         if payment_date and current_date <= payment_date <= date_limit and execution_status == 0:
#             weekday_short = get_weekday_short(payment_date)
#             payment_str = f'{payment_date.strftime('%d.%m.%Y')} ({weekday_short}), {card_name}, {transaction_type}, {amount:,.2f} —Ä—É–±.'
#             payments.append({'uuid': payment_uuid, 'description': payment_str, 'type': transaction_type})
#
#     if payments:
#         bot.send_message(message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
#         for payment in payments:
#             logging.info(f'–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å UUID: {payment['uuid']}')
#             markup = types.InlineKeyboardMarkup()
#             edit_button = types.InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'edit_{payment['uuid']}')
#             markup.add(edit_button)
#             bot.send_message(message.chat.id, f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {payment['description']}', reply_markup=markup)
#         logging.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')
#     else:
#         bot.send_message(message.chat.id, '–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
#         logging.info(
#             f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.')


    if payments:
        bot.send_message(message.chat.id, "–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for payment in payments:
            markup = types.InlineKeyboardMarkup()
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{payment['uuid']}")
            markup.add(edit_button)
            bot.send_message(message.chat.id, f"–ü–ª–∞—Ç–µ–∂: {payment['description']}", reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        logging.info(f"–ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)


# def process_edit_payment(message):
#     try:
#         if message.chat.id not in payment_data or 'edit_uuid' not in payment_data[message.chat.id]:
#             bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
#             return
#
#         payment_uuid = payment_data[message.chat.id]['edit_uuid']
#         conn = get_db_connection()
#         cursor = conn.cursor()
#
#         cursor.execute('SELECT recurrence_id, is_recursive FROM transactions WHERE uuid = ?', (payment_uuid,))
#         transaction = cursor.fetchone()
#         conn.close()
#
#         if transaction and transaction['is_recursive'] == 1:
#             recurrence_id = transaction['recurrence_id']
#             markup = types.InlineKeyboardMarkup()
#             edit_one_button = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç—É',
#                                                          callback_data=f'edit_one_{payment_uuid}')
#             edit_series_button = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å—é —Å–µ—Ä–∏—é',
#                                                             callback_data=f'edit_series_{recurrence_id}')
#             markup.add(edit_one_button, edit_series_button)
#
#             logging.info(f'–ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: edit_one_{payment_uuid} –∏ edit_series_{recurrence_id}')
#             bot.send_message(message.chat.id,
#                              '–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å–µ—Ä–∏–∏. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ—ë –∏–ª–∏ –≤—Å—é —Å–µ—Ä–∏—é?',
#                              reply_markup=markup)
#         else:
#             bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.')
#             bot.register_next_step_handler(message, edit_transaction_data, payment_uuid)
#
#     except Exception as e:
#         bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {str(e)}')
#         logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}')


# def find_transaction(uuid):
#     original_uuid = uuid
#     if uuid.startswith('edit_one_'):
#         uuid = uuid.replace('edit_one_', '')
#     elif uuid.startswith('edit_series_'):
#         uuid = uuid.replace('edit_series_', '')
#
#     logging.info(f'–ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å UUID (–∏—Å—Ö–æ–¥–Ω—ã–π: {original_uuid}, –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞: {uuid})')
#     conn = get_db_connection()
#     cursor = conn.cursor()
#     cursor.execute('SELECT * FROM transactions WHERE uuid = ?', (uuid,))
#     transaction = cursor.fetchone()
#     conn.close()
#
#     if transaction:
#         logging.info(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {transaction}')
#     else:
#         logging.warning(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
#
#     return transaction


# def edit_transaction_data(message, payment_uuid):
#     logging.info(f'–§—É–Ω–∫—Ü–∏—è edit_transaction_data –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è UUID: {payment_uuid}')
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#         inputs = message.text.strip().split()
#         if len(inputs) != 4:
#             bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.')
#             return
#
#         date_str, card_name, transaction_type_input, amount_str = inputs
#         date = datetime.strptime(date_str, '%d.%m.%Y').date()
#         transaction_type = transaction_type_input.lower()
#         amount = float(amount_str)
#
#         if transaction_type not in ['–≤–Ω–µ—Å—Ç–∏', '—Å–Ω—è—Ç—å']:
#             bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.')
#             return
#
#         conn = get_db_connection()
#         cursor = conn.cursor()
#         cursor.execute("""
#             UPDATE transactions
#             SET date = ?, card_name = ?, transaction_type = ?, amount = ?
#             WHERE uuid = ?
#         """, (date, card_name, transaction_type, amount, payment_uuid))
#         conn.commit()
#         conn.close()
#
#         bot.send_message(message.chat.id, '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
#
#     except Exception as e:
#         bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {str(e)}')
#         logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}')


# def edit_series_data(message, recurrence_id):
#     logging.info(f'–§—É–Ω–∫—Ü–∏—è edit_series_data –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è recurrence_id: {recurrence_id}')
#     try:
#         inputs = message.text.strip().split()
#         if len(inputs) != 4:
#             bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í–≤–µ–¥–∏—Ç–µ: –¥–∞—Ç–∞ –∫–∞—Ä—Ç–∞ —Ç–∏–ø —Å—É–º–º–∞.')
#             return
#
#         date_str, card_name, transaction_type_input, amount_str = inputs
#         date = datetime.strptime(date_str, '%d.%m.%Y').date()
#         transaction_type = transaction_type_input.lower()
#         amount = float(amount_str)
#
#         if transaction_type not in ['–≤–Ω–µ—Å—Ç–∏', '—Å–Ω—è—Ç—å']:
#             bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.')
#             return
#
#         conn = get_db_connection()
#         cursor = conn.cursor()
#         cursor.execute("""
#             UPDATE transactions
#             SET date = ?, card_name = ?, transaction_type = ?, amount = ?
#             WHERE recurrence_id = ? AND date >= ?
#         """, (date, card_name, transaction_type, amount, recurrence_id, datetime.now().date().isoformat()))
#         conn.commit()
#         conn.close()
#
#         bot.send_message(message.chat.id, '–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ä–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
#
#     except Exception as e:
#         bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞: {str(e)}')
#         logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {str(e)}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
# def update_transaction_status(uuid, status):
#     conn = sqlite3.connect('transactions.db')
#     cursor = conn.cursor()
#     cursor.execute("""
#         UPDATE transactions
#         SET execution_status = ?
#         WHERE UUID = ?
#     """, (status, uuid))
#
#     # Check if any rows were updated
#     if cursor.rowcount == 0:
#         logging.warning(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')
#     else:
#         logging.info(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å UUID {uuid} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.')
#
#     conn.commit()  # Save changes
#     conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ '–£–∂–µ –≤–Ω–µ—Å' –∏–ª–∏ '–£–∂–µ —Å–Ω—è–ª'
# def send_reminder_with_buttons(payment_uuid, message_text, transaction_type):
#     """
#     –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
#
#     –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
#     payment_uuid -- –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (UUID).
#     message_text -- —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#     transaction_type -- —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ('–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å').
#     """
#
#     # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
#     markup = types.InlineKeyboardMarkup()
#
#     # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#     if transaction_type.lower() == '–≤–Ω–µ—Å—Ç–∏":
#         button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment_uuid}")
#     elif transaction_type.lower() == "—Å–Ω—è—Ç—å":
#         button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment_uuid}")
#     else:
#         # –ï—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"
#         button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment_uuid}")
#
#     markup.add(button)
#
#     # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
#     logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{message_text}' —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è UUID {payment_uuid}")
#
#     # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
#     try:
#         bot.send_message(chat_id, message_text, reply_markup=markup)
#         logging.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
#     except Exception as e:
#         logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
schedule.every(1).minutes.do(send_reminders)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
bot_thread = threading.Thread(target=safe_polling, daemon=True)
bot_thread.start()

# –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
while True:
    time.sleep(60)
