import telebot
from telebot import types
from datetime import datetime, timedelta
import openpyxl
import schedule
import time
import threading
import os
from dotenv import load_dotenv
import logging
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat_id –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = os.getenv('CHAT_ID')

if not TOKEN:
    logging.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")

if not CHAT_ID:
    logging.error("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")
    raise ValueError("CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")

try:
    CHAT_ID = int(CHAT_ID)  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ CHAT_ID –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
except ValueError:
    logging.error("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    raise ValueError("CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ Excel
try:
    workbook = openpyxl.load_workbook('Payments.xlsx')
    sheet = workbook.active
    logging.info("–§–∞–π–ª Payments.xlsx —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
except FileNotFoundError:
    logging.error("–§–∞–π–ª Payments.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    raise

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º –ø–ª–∞—Ç–µ–∂–µ
payment_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
def get_weekday_short(date):
    weekdays = {
        0: '–ø–Ω.',
        1: '–≤—Ç.',
        2: '—Å—Ä.',
        3: '—á—Ç.',
        4: '–ø—Ç.',
        5: '—Å–±.',
        6: '–≤—Å.'
    }
    return weekdays.get(date.weekday(), '')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?')
    btn2 = types.KeyboardButton('üîú –ë–ª–∏–∂–∞–π—à–∏–µ')
    btn3 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å')
    btn4 = types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å')
    keyboard.add(btn1, btn2)
    keyboard.add(btn3, btn4)
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–º–µ–Ω—é "–ë–ª–∏–∂–∞–π—à–∏–µ"
def nearest_menu_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton('3Ô∏è‚É£ –¥–Ω—è')
    btn2 = types.KeyboardButton('7Ô∏è‚É£ –¥–Ω–µ–π')
    btn3 = types.KeyboardButton('3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π')
    btn4 = types.KeyboardButton('üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü')
    back = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
    keyboard.add(btn1, btn2, btn3, btn4)
    keyboard.add(back)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = main_menu_keyboard()
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!', reply_markup=markup)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –ø–æ–¥–º–µ–Ω—é "–ë–ª–∏–∂–∞–π—à–∏–µ"
@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    if message.text == "üìÖ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è?":
        show_today(message)
    elif message.text == "üîú –ë–ª–∏–∂–∞–π—à–∏–µ":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=nearest_menu_keyboard())
    elif message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        add_payment(message)
    elif message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å":
        edit_payments(message)
    elif message.text == "3Ô∏è‚É£ –¥–Ω—è":
        show_nearest_days(message, 3)
    elif message.text == "7Ô∏è‚É£ –¥–Ω–µ–π":
        show_nearest_days(message, 7)
    elif message.text == "3Ô∏è‚É£0Ô∏è‚É£ –¥–Ω–µ–π":
        show_nearest_days(message, 30)
    elif message.text == "üóì –≠—Ç–æ—Ç –º–µ—Å—è—Ü":
        show_this_month(message)
    elif message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
def show_today(message):
    current_date = datetime.now().date()
    payments_today = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        payment_uuid = row[0]
        payment_date = row[1].date() if isinstance(row[1], datetime) else None
        card_name = row[2]
        transaction_type = row[3]
        amount = row[4]
        execution_status = row[5]

        logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: UUID={payment_uuid}, –î–∞—Ç–∞={payment_date}, –ö–∞—Ä—Ç–∞={card_name}, –¢–∏–ø={transaction_type}, –°—É–º–º–∞={amount}, –°—Ç–∞—Ç—É—Å={execution_status}")

        if payment_date == current_date and execution_status == 0:
            weekday_short = get_weekday_short(payment_date)
            payment_str = f"{payment_date.strftime('%d.%m.%Y')} ({weekday_short}), {card_name}, {transaction_type}, {amount:,.2f} —Ä—É–±."
            payments_today.append({'uuid': payment_uuid, 'description': payment_str, 'type': transaction_type})

    if payments_today:
        for payment in payments_today:
            markup = types.InlineKeyboardMarkup()
            if payment['type'].lower() == "–≤–Ω–µ—Å—Ç–∏":
                button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment['uuid']}")
            elif payment['type'].lower() == "—Å–Ω—è—Ç—å":
                button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment['uuid']}")
            else:
                # –ï—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
                button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment['uuid']}")
            markup.add(button)
            bot.send_message(message.chat.id, payment['description'], reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
        logging.info(f"–ü–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
def show_nearest_days(message, days):
    current_date = datetime.now().date()
    date_limit = current_date + timedelta(days=days)
    payments = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        payment_uuid = row[0]
        payment_date = row[1].date() if isinstance(row[1], datetime) else None
        card_name = row[2]
        transaction_type = row[3]
        amount = row[4]
        execution_status = row[5]

        if payment_date and current_date < payment_date <= date_limit and execution_status == 0:
            weekday_short = get_weekday_short(payment_date)
            payment_str = f"{payment_date.strftime('%d.%m.%Y')} ({weekday_short}), {card_name}, {transaction_type}, {amount:,.2f} —Ä—É–±."
            payments.append({'uuid': payment_uuid, 'description': payment_str, 'type': transaction_type})

    if payments:
        for payment in payments:
            markup = types.InlineKeyboardMarkup()
            if payment['type'].lower() == "–≤–Ω–µ—Å—Ç–∏":
                button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment['uuid']}")
            elif payment['type'].lower() == "—Å–Ω—è—Ç—å":
                button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment['uuid']}")
            else:
                # –ï—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
                button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment['uuid']}")
            markup.add(button)
            bot.send_message(message.chat.id, payment['description'], reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, f"–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π.")
        logging.info(f"–ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Å–ª–µ–¥—É—é—â–∏–µ {days} –¥–Ω–µ–π –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
def show_this_month(message):
    current_date = datetime.now().date()
    current_month = current_date.month
    current_year = current_date.year
    payments = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        payment_uuid = row[0]
        payment_date = row[1].date() if isinstance(row[1], datetime) else None
        card_name = row[2]
        transaction_type = row[3]
        amount = row[4]
        execution_status = row[5]

        if (payment_date and payment_date.month == current_month and
            payment_date.year == current_year and
            payment_date >= current_date and
            execution_status == 0):
            weekday_short = get_weekday_short(payment_date)
            payment_str = f"{payment_date.strftime('%d.%m.%Y')} ({weekday_short}), {card_name}, {transaction_type}, {amount:,.2f} —Ä—É–±."
            payments.append({'uuid': payment_uuid, 'description': payment_str, 'type': transaction_type})

    if payments:
        for payment in payments:
            markup = types.InlineKeyboardMarkup()
            if payment['type'].lower() == "–≤–Ω–µ—Å—Ç–∏":
                button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment['uuid']}")
            elif payment['type'].lower() == "—Å–Ω—è—Ç—å":
                button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment['uuid']}")
            else:
                # –ï—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
                button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment['uuid']}")
            markup.add(button)
            bot.send_message(message.chat.id, payment['description'], reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        logging.info(f"–ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
def add_payment(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥), –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å', —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
        reply_markup=types.ForceReply(selective=False)
    )
    bot.register_next_step_handler(message, process_payment_data)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
def process_payment_data(message):
    try:
        inputs = message.text.strip().split()
        if len(inputs) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")

        date_str, card_name, transaction_type_input, amount_str = inputs
        date = datetime.strptime(date_str, "%d.%m.%Y").date()
        transaction_type = transaction_type_input.lower()
        amount = float(amount_str)

        if transaction_type not in ["–≤–Ω–µ—Å—Ç–∏", "—Å–Ω—è—Ç—å"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å'.")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        payment_uuid = str(uuid.uuid4())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if message.chat.id in payment_data and 'edit_uuid' in payment_data[message.chat.id]:
            old_uuid = payment_data[message.chat.id]['edit_uuid']
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            sheet.append([
                payment_uuid,
                datetime.combine(date, datetime.min.time()),
                card_name,
                transaction_type,
                amount,
                0  # Execution status
            ])
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id} (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ).")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            remove_payment_by_uuid(old_uuid)
            logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–ª–∞—Ç–µ–∂ —Å UUID {old_uuid} –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            del payment_data[message.chat.id]['edit_uuid']
        else:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            sheet.append([
                payment_uuid,
                datetime.combine(date, datetime.min.time()),
                card_name,
                transaction_type,
                amount,
                0  # Execution status
            ])
            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.")

        workbook.save('Payments.xlsx')

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.send_message(message.chat.id, "–ü–ª–∞—Ç–µ–∂(–∏) –¥–æ–±–∞–≤–ª–µ–Ω(—ã)!", reply_markup=main_menu_keyboard())
        logging.info(f"–ü–ª–∞—Ç–µ–∂(–∏) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(—ã) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}.")
    except (ValueError, IndexError) as e:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.chat.id}: {e}")

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ UUID
def remove_payment_by_uuid(payment_uuid):
    rows = list(sheet.iter_rows(min_row=2, values_only=False))
    for row in rows:
        if row[0].value == payment_uuid:
            sheet.delete_rows(row[0].row, 1)
            logging.info(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} —É–¥–∞–ª–µ–Ω.")
            return
    logging.warning(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
def edit_payments(message):
    current_date = datetime.now().date()
    date_limit = current_date + timedelta(days=30)
    payments = []

    for row in sheet.iter_rows(min_row=2, values_only=True):
        payment_uuid = row[0]
        payment_date = row[1].date() if isinstance(row[1], datetime) else None
        card_name = row[2]
        transaction_type = row[3]
        amount = row[4]
        execution_status = row[5]

        if payment_date and current_date <= payment_date <= date_limit and execution_status == 0:
            weekday_short = get_weekday_short(payment_date)
            payment_str = f"{payment_date.strftime('%d.%m.%Y')} ({weekday_short}), {card_name}, {transaction_type}, {amount:,.2f} —Ä—É–±."
            payments.append({'uuid': payment_uuid, 'description': payment_str, 'type': transaction_type})

    if payments:
        bot.send_message(message.chat.id, "–ü–ª–∞—Ç–µ–∂–∏ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        for payment in payments:
            markup = types.InlineKeyboardMarkup()
            edit_button = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{payment['uuid']}")
            markup.add(edit_button)
            bot.send_message(message.chat.id, f"–ü–ª–∞—Ç–µ–∂: {payment['description']}", reply_markup=markup)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        logging.info(f"–ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.id}.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–æ–∫)
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    data = call.data
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω callback_data: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")

    if data.startswith("done_") or data.startswith("withdrawn_"):
        action, payment_uuid = data.split("_", 1)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ UUID
            if not any(row[0].value == payment_uuid for row in sheet.iter_rows(min_row=2, values_only=False)):
                raise ValueError("UUID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ UUID {payment_uuid}: {e}")
            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 1
        update_payment_status(payment_uuid, 1)
        logging.info(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π/—Å–Ω—è—Ç—ã–π.")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if action == "done":
            new_button_text = "–ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?"
            new_callback_data = f"undo_done_{payment_uuid}"
        elif action == "withdrawn":
            new_button_text = "–ì–æ—Ç–æ–≤–æ. –û—Ç–º–µ–Ω–∏—Ç—å?"
            new_callback_data = f"undo_withdrawn_{payment_uuid}"
        else:
            new_button_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            new_callback_data = f"done_{payment_uuid}"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        markup = types.InlineKeyboardMarkup()
        undo_button = types.InlineKeyboardButton(new_button_text, callback_data=new_callback_data)
        markup.add(undo_button)

        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.")

    elif data.startswith("undo_done_") or data.startswith("undo_withdrawn_"):
        parts = data.split("_")
        if len(parts) != 3:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –æ—Ç–º–µ–Ω—ã: {data}")
            bot.answer_callback_query(call.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        _, action_type, payment_uuid = parts
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ UUID
            if not any(row[0].value == payment_uuid for row in sheet.iter_rows(min_row=2, values_only=False)):
                raise ValueError("UUID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ UUID {payment_uuid}: {e}")
            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ 0
        update_payment_status(payment_uuid, 0)
        logging.info(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –æ—Ç–º–µ–Ω—ë–Ω.")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if data.startswith("undo_done_"):
            original_action = "done"
            new_button_text = "‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å"
            new_callback_data = f"done_{payment_uuid}"
        elif data.startswith("undo_withdrawn_"):
            original_action = "withdrawn"
            new_button_text = "‚úÖ –£–∂–µ —Å–Ω—è–ª"
            new_callback_data = f"withdrawn_{payment_uuid}"
        else:
            original_action = "done"
            new_button_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"
            new_callback_data = f"done_{payment_uuid}"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        markup = types.InlineKeyboardMarkup()
        original_button = types.InlineKeyboardButton(new_button_text, callback_data=new_callback_data)
        markup.add(original_button)

        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id, "–û—Ç–º–µ—Ç–∫–∞ –æ–± –æ—Ç–º–µ–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–º–µ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞.")
    elif data.startswith("edit_"):
        payment_uuid = data.split("_", 1)[1]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ UUID
        if not any(row[0].value == payment_uuid for row in sheet.iter_rows(min_row=2, values_only=False)):
            bot.answer_callback_query(call.id, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            logging.error(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º UUID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if call.from_user.id not in payment_data:
            payment_data[call.from_user.id] = {}
        payment_data[call.from_user.id]['edit_uuid'] = payment_uuid

        bot.send_message(call.message.chat.id, "–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂, –≤–≤–µ–¥—è –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        bot.send_message(
            call.message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥), –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã, '–≤–Ω–µ—Å—Ç–∏' –∏–ª–∏ '—Å–Ω—è—Ç—å', —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=types.ForceReply(selective=False)
        )
        bot.register_next_step_handler(call.message, process_payment_data)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å UUID {payment_uuid}.")
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
def update_payment_status(payment_uuid, status):
    date_found = False
    for row in sheet.iter_rows(min_row=2, max_row=sheet.max_row):
        cell = row[0]
        if cell.value == payment_uuid:
            row[5].value = status  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            date_found = True
            logging.debug(f"UUID {payment_uuid}: –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {status}.")
            break

    if date_found:
        try:
            workbook.save('Payments.xlsx')
            logging.info(f"–§–∞–π–ª Payments.xlsx —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UUID {payment_uuid}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Payments.xlsx: {e}")
    else:
        logging.warning(f"–ü–ª–∞—Ç–µ–∂ —Å UUID {payment_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
def send_reminder_with_buttons(payment_uuid, message_text, transaction_type):
    markup = types.InlineKeyboardMarkup()
    if transaction_type.lower() == "–≤–Ω–µ—Å—Ç–∏":
        button = types.InlineKeyboardButton("‚òëÔ∏è –£–∂–µ –≤–Ω–µ—Å", callback_data=f"done_{payment_uuid}")
    elif transaction_type.lower() == "—Å–Ω—è—Ç—å":
        button = types.InlineKeyboardButton("‚úÖ –£–∂–µ —Å–Ω—è–ª", callback_data=f"withdrawn_{payment_uuid}")
    else:
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        button = types.InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{payment_uuid}")
    markup.add(button)

    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: '{message_text}' —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è UUID {payment_uuid}")
    try:
        bot.send_message(CHAT_ID, message_text, reply_markup=markup)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def send_reminders():
    current_datetime = datetime.now()
    current_date = current_datetime.date()
    current_time = current_datetime.time()
    current_time_str = current_time.strftime("%H:%M")

    reminder_today_times = ["10:00", "14:00", "17:00"]
    reminder_tomorrow_time = "15:00"

    for row in sheet.iter_rows(min_row=2, values_only=True):
        payment_uuid = row[0]
        payment_date = row[1].date() if isinstance(row[1], datetime) else None
        card_name = row[2]
        transaction_type = row[3]
        amount = row[4]
        execution_status = row[5]

        if payment_date and execution_status == 0:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ transaction_type
            if isinstance(transaction_type, str):
                transaction_type_lower = transaction_type.lower()
            else:
                transaction_type_lower = ""
                logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è UUID {payment_uuid}: {transaction_type}")

            if payment_date == current_date and current_time_str in reminder_today_times:
                message_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü–ª–∞—Ç–µ–∂ –Ω–∞ {payment_date.strftime('%d.%m.%Y')} ({get_weekday_short(payment_date)}), {card_name}, {transaction_type_lower}, {amount:,.2f} —Ä—É–±."
                send_reminder_with_buttons(payment_uuid, message_text, transaction_type_lower)
            elif (payment_date == current_date + timedelta(days=1) and
                  current_time_str == reminder_tomorrow_time and
                  execution_status == 0):
                message_text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ó–∞–≤—Ç—Ä–∞ –ø–ª–∞—Ç–µ–∂ –Ω–∞ {payment_date.strftime('%d.%m.%Y')} ({get_weekday_short(payment_date)}), {card_name}, {transaction_type_lower}, {amount:,.2f} —Ä—É–±."
                send_reminder_with_buttons(payment_uuid, message_text, transaction_type_lower)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def safe_polling():
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞.")
            bot.polling(none_stop=True, interval=0, timeout=20)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ bot.polling: {e}")
            logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
            time.sleep(5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
schedule.every(5).minutes.do(send_reminders)
logging.info("–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.")

scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
scheduler_thread.start()
logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
safe_polling()
